Automatically generated by Mendeley Desktop 1.19.3
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@inproceedings{Park2018,
author = {Park, Daejun and Zhang, Yi and Saxena, Manasvi and Rosu, Grigore and Daian, Philip},
booktitle = {Proceedings of the 2018 ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE'18)},
file = {:home/nud3l/share/knowledge/park-zhang-saxena-daian-rosu-2018-fse-public.pdf:pdf},
pages = {18--21},
title = {{A Formal Verification Tool for Ethereum VM Bytecode}},
year = {2018}
}
@article{Bhargavan2016,
abstract = {Ethereum is a cryptocurrency framework that uses blockchain technology to provide an open distributed computing plat-form, called the Ethereum Virtual Machine (EVM). EVM programs are written in bytecode which operates on a sim-ple stack machine. Programmers do not usually write EVM code; instead, they can program in a JavaScript-like lan-guage called Solidity that compiles to bytecode. Since the main application of EVM programs is as smart contracts that manage and transfer digital assets, security is of paramount importance. However, writing trustworthy smart contracts can be extremely difficult due to the intricate semantics of EVM and its openness: both programs and pseudonymous users can call into the public methods of other programs. This problem is best illustrated by the recent attack on TheDAO contract, which allowed roughly {\$}50M USD worth of Ether to be transferred into the control of an attacker. Re-covering the funds required a hard fork of the blockchain, contrary to the code is law premise of the system. In this paper, we outline a framework to analyze and verify both the runtime safety and the functional correctness of Solidity contracts in F , a functional programming language aimed at program verification.},
author = {Bhargavan, Karthikeyan and Swamy, Nikhil and Zanella-B{\'{e}}guelin, Santiago and Delignat-Lavaud, Antoine and Fournet, C{\'{e}}dric and Gollamudi, Anitha and Gonthier, Georges and Kobeissi, Nadim and Kulatova, Natalia and Rastogi, Aseem and Sibut-Pinote, Thomas},
doi = {10.1145/2993600.2993611},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bhargavan et al. - 2016 - Formal Verification of Smart Contracts.pdf:pdf},
isbn = {9781450345743},
journal = {Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security - PLAS'16},
keywords = {EVM,ethereum,formal verification,smart contracts,solidity},
pages = {91--96},
title = {{Formal Verification of Smart Contracts}},
year = {2016}
}
@misc{Wanderer2015,
author = {Wanderer},
title = {{EIP 48: EVM 2.0 WASM}},
url = {https://github.com/ethereum/EIPs/issues/48},
urldate = {2018-08-16},
year = {2015}
}
@article{Team2018,
author = {Team, The Statebox},
file = {:home/nud3l/share/knowledge/monograph-32588f68459f1076c84775c8fcdc7d6cd73387b3.pdf:pdf},
title = {{The Mathematical Specification of the Statebox Language}},
url = {statebox.org},
year = {2018}
}
@phdthesis{Knottenbelt2006,
author = {Knottenbelt, John},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Knottenbelt - 2006 - Contract related agents.pdf:pdf},
number = {September},
pages = {226},
school = {Imperial College London},
title = {{Contract related agents}},
type = {PhD},
volume = {3900},
year = {2006}
}
@inproceedings{Alt2018,
abstract = {One of the biggest challenges in the RoboCup Soccer Standard Platform League (SPL) is autonomously achieving and maintaining an accurate estimate of a robot's position and orientation on the field. In other robotics applications many robust systems already exist for localization such as visual simultaneous localization and mapping (SLAM) and LIDAR based SLAM. These approaches either require special hardware or are very computationally expensive and are not suitable for the Nao robot, the current robot of choice for the SPL. Therefore novel approaches to localization in the RoboCup SPL environment are required. In this paper we present a new approach to localization in the SPL which relies primarily on the information contained within white field markings while being efficient enough to run in real time on board a Nao robot. {\textcopyright} 2012 Springer-Verlag.},
archivePrefix = {arXiv},
arxivId = {9780201398298},
author = {Alt, Leonardo and Reitwiessner, Christian},
booktitle = {Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. ISoLA 2018},
doi = {10.1007/978-3-030-03427-6_28},
eprint = {9780201398298},
file = {:home/nud3l/share/knowledge/Alt-Reitwiessner2018{\_}Chapter{\_}SMT-BasedVerificationOfSolidit.pdf:pdf},
isbn = {978-3-642-34031-4},
issn = {18650929},
pages = {376--388},
pmid = {4520227},
publisher = {Springer International Publishing},
title = {{SMT-Based Verification of Solidity Smart Contracts}},
url = {http://link.springer.com/10.1007/978-3-642-34032-1 http://link.springer.com/10.1007/978-3-030-03427-6{\_}28},
volume = {7610},
year = {2018}
}
@incollection{Dignum2002,
abstract = {The Agent Society framework that we have developed distinguishes between the mechanisms though which the structure and global behavior of the model is described and coordinated, and the aims and behavior of the service- providers (agents) that populate the model. In this framework contracts are used to integrate the top-down specification of organizational structures with the autonomy of participating agents. In this paper we introduce LCR, a very expressive logic for describing interaction in multi-agent systems. We also show how LCR behaves in contrary-to-duty situations common to deontic logic frameworks. LCR makes it possible to check whether agents in an agent society follow some desired interaction patterns and whether desired social states are preserved by agent activity. LCR is used as a formal basis for the framework for agents societies that we are developing.},
author = {Dignum, Virginia and Meyer, John-Jules C. and Dignum, Frank and Weigand, Hans},
booktitle = {Formal approaches to agent-based systems},
doi = {10.1007/978-3-540-45133-4_4},
file = {:home/nud3l/share/knowledge/Dignum2003{\_}Chapter{\_}FormalSpecificationOfInteracti.pdf:pdf},
isbn = {3-540-40665-4},
issn = {03029743},
pages = {37--52},
title = {{Formal Specification of Interaction in Agent Societies}},
url = {http://www.springerlink.com/index/77KH0QAAJBUTVC34.pdf http://link.springer.com/10.1007/978-3-540-45133-4{\_}4},
year = {2003}
}
@misc{Mueller2018LASER,
author = {Mueller, Bernhard},
title = {{LASER: symbolic virtual machine for Ethereum}},
url = {https://github.com/b-mueller/laser-ethereum},
urldate = {2018-09-06},
year = {2018}
}
@techreport{Meredith2018,
author = {Meredith, Lucius Gregory and Pettersson, Jack and Stephenson, Gary and Stay, Michael and Shikama, Kent and Denman, Joseph},
file = {:home/nud3l/share/knowledge/rholang-spec-0.2.pdf:pdf},
title = {{Contracts, Composition, and Scaling: The Rholang specification 0.2}},
year = {2018}
}
@misc{Ethereum2015,
author = {Ethereum},
title = {{ERC:20}},
url = {https://github.com/ethereum/EIPs/issues/20},
urldate = {2017-04-27},
year = {2015}
}
@article{Grossman2017,
abstract = {Callbacks are essential in many programming environments, but drastically complicate program understanding and reasoning because they allow to mutate object's local states by external objects in unexpected fashions, thus breaking modularity. The famous DAO bug in the cryptocurrency framework Ethereum, employed callbacks to steal {\$}150M. We define the notion of Effectively Callback Free (ECF) objects in order to allow callbacks without preventing modular reasoning. An object is ECF in a given execution trace if there exists an equivalent execution trace without callbacks to this object. An object is ECF if it is ECF in every possible execution trace. We study the decidability of dynamically checking ECF in a given execution trace and statically checking if an object is ECF. We also show that dynamically checking ECF in Ethereum is feasible and can be done online. By running the history of all execution traces in Ethereum, we were able to verify that virtually all existing contracts, excluding the DAO or contracts with similar known vulnerabilities, are ECF. Finally, we show that ECF, whether it is verified dynamically or statically, enables modular reasoning about objects with encapsulated state.},
archivePrefix = {arXiv},
arxivId = {1801.04032},
author = {Grossman, Shelly and Abraham, Ittai and Golan-Gueta, Guy and Michalevsky, Yan and Rinetzky, Noam and Sagiv, Mooly and Zohar, Yoni},
doi = {10.1145/3158136},
eprint = {1801.04032},
file = {:home/nud3l/share/knowledge/popl18-p124.pdf:pdf},
issn = {24751421},
journal = {Proceedings of the ACM on Programming Languages},
keywords = {Modular reasoning,Program analysis,Smart contracts},
month = {dec},
number = {POPL},
pages = {1--28},
title = {{Online detection of effectively callback free objects with applications to smart contracts}},
url = {http://arxiv.org/abs/1801.04032 http://dl.acm.org/citation.cfm?doid=3177123.3158136},
volume = {2},
year = {2017}
}
@article{Linington2004,
abstract = {This paper presents a coordination model for expressing behaviour in an extended enterprise. Our model is unified because it enables the same style of expressions for describing behaviour/structure in a self-contained enterprise and for describing cross-enterprise behaviour/structure. This model can support a broad range of modelling activities but the specific focus of this paper is on deriving the key elements of a domain language primarily targeted at expressing and monitoring behavioural conditions stated in business contracts. We also show how business contracts serve as a unifying mechanism for describing interactions in the extended enterprise. {\textcopyright} 2004 Elsevier B.V. All rights reserved.},
author = {Linington, Peter F. and Milosevic, Zoran and Cole, James and Gibson, Simon and Kulkarini, Sachin and Neal, Stephen},
doi = {10.1016/j.datak.2004.03.005},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Linington et al. - 2004 - A unified behavioural model and a contract language for extended enterprise.pdf:pdf},
issn = {0169023X},
journal = {Data and Knowledge Engineering},
keywords = {Contracts,Cooperative work,E-commerce,Enterprise specification,Web applications/XML},
number = {1},
pages = {5--29},
title = {{A unified behavioural model and a contract language for extended enterprise}},
volume = {51},
year = {2004}
}
@misc{Maric2018,
author = {Maric, Ognjen and Krom, Robin S.},
booktitle = {DAML series},
title = {{Keeping smart contracts private is hard - unless you truly understand them}},
url = {https://medium.com/daml-driven/keeping-smart-contracts-private-is-hard-unless-you-truly-understand-them-920b31d723e4},
urldate = {2018-08-31},
year = {2018}
}
@misc{Pilav2018,
author = {Pilav, Darko and Villiger, Silvan},
booktitle = {DAML series},
title = {{Smart contract code: when what you don't write is as important as what you do}},
url = {https://medium.com/daml-driven/smart-contract-code-when-what-you-dont-write-is-as-important-as-what-you-do-d11725a9fb4},
urldate = {2018-08-31},
year = {2018}
}
@article{Farrell2004,
abstract = {Utility computing (UC) is concerned with the provisioning of computational resources (compute-power, storage, network bandwidth), on a per-need basis, to corporate businesses. Service-level agreements (SLAs) - contracts between a provider and a customer - are a sine qua non in the deployment of UC. A crucial stage in the life-cycle of contracts (such as SLAs) is their automated performance monitoring while active; a significant aspect of which concerns the tracking of contract state. In this work, we define an ontology to capture aspects of SLAs that are pertinent to the tracking of state for performance monitoring, and generalise these aspects so that the ontology may be applicable to other contract domains. The ontology is formalised as an XML-based language, called CTXML (contract tracking XML). The semantics for CTXML are presented in terms of a computational model based on the event calculus.},
author = {Farrell, Andrew D.H. and Sergot, Marek J. and Salle, Mathias and Bartoiini, Claudio and Trastour, David and Christodoulou, Athena},
doi = {10.1109/WEC.2004.1319504},
file = {:home/nud3l/share/knowledge/10.1.1.164.598.pdf:pdf},
isbn = {0769521843},
journal = {Proceedings - First IEEE International Workshop on Electronic Contracting, WEC 2004},
number = {i},
pages = {17--24},
title = {{Performance monitoring of service-level agreements for utility computing using the Event Calculus}},
year = {2004}
}
@misc{RuntimeVerification2018,
author = {{Runtime Verification}},
title = {{eDSL}},
url = {https://github.com/runtimeverification/verified-smart-contracts/blob/master/resources/edsl-spec.md},
urldate = {2018-12-13},
year = {2018}
}
@incollection{Hirai2017,
abstract = {Motivation. Public ledger is a decentralized book keeping technology and is believed to have the potential to revolutionize many areas. Besides handling crypto-currency, public ledger can be used to tokenize arbitrary assets, and then support trading of these asset tokens in a decentralized manner. With public ledger based token trading system, users do not necessarily convert their assets to currencies, but can exchange assets directly. It also avoids unnecessary transportation as the asset only needs to be physically transferred to its last owner. Furthermore, utilization of the public ledger does not require that users have to trust each other in order to trade tokens safely. However, using decentralized public ledger for trading asset tokens raises serious privacy concerns. Because token ownership information is stored on the public ledger and disclosed to the public, anyone can uncover users trading activities and history. For a token based asset trading platform, all tokens are unique and transactions are usually two-ways or multi-ways. In response to these challenges, we propose ZeroTrade, a privacy respecting heterogeneous assets trading system that leverages various cryptography tools to conceal the exchange trace of asset tokens and takes advantage of public ledger for guaranteeing fairness of asset token exchange. Solution. ZeroTrade involves trusted hubs that are responsible for converting assets to tokens and back, where trusted means that hubs will generate/accept valid tokens, and uses the public ledger to record all token exchange information. When two or more users want to exchange tokens with each other, each user picks an agent for the exchange. Asset tokens are first poured into a pool and users leverage agents to obliviously retrieve tokens from the pool in order to finish the exchange. The oblivious retrieving process cut off the connection between the original user and the agent. Therefore, one cannot determine the relationship between the original users who want to exchange tokens by observing information recorded on the public ledger. To implement the design, ZeroTrade leverages different cryptography tools including zero-knowledge proof and various encryption techniques. Considering various demands in token trade, ZeroTrade also supports operations like partial token trade and revocation. A preliminary evaluation of the performance shows that ZeroTrade only adds limited burden on top of the public ledger. More detailed information can be found in the full version of the paper. Conclusion. ZeroTrade provides a privacy friendly platform for asset trading based on public ledger. For the next step, we plan to implement a fully functional prototype and considering more complex token trading scenarios. {\textcopyright} International Financial Cryptography Association 2017.},
author = {Hirai, Yoichi},
booktitle = {Lecture Notes in Computer Science},
doi = {10.1007/978-3-319-70278-0_33},
file = {:home/nud3l/share/knowledge/Hirai2017{\_}Chapter{\_}DefiningTheEthereumVirtualMach.pdf:pdf},
isbn = {9783319702773},
issn = {16113349},
pages = {520--535},
title = {{Defining the Ethereum Virtual Machine for Interactive Theorem Provers}},
url = {http://link.springer.com/10.1007/978-3-319-70278-0{\_}33},
volume = {10323},
year = {2017}
}
@article{Classen2010,
abstract = {In product line engineering, systems are developed in families and differences between family members are expressed in terms of features. Formal modelling and verification is an important issue in this context as more and more critical systems are developed this way. Since the number of systems in a family can be exponential in the number of features, two major challenges are the scalable modelling and the efficient verification of system behaviour. Currently, the few attempts to address them fail to recognise the importance of features as a unit of difference, or do not offer means for automated verification. In this paper, we tackle those challenges at a fundamental level. We first extend transition systems with features in order to describe the combined behaviour of an entire system family. We then define and implement a model checking technique that allows to verify such transition systems against temporal properties. An empirical evaluation shows substantial gains over classical approaches.},
author = {Classen, Andreas and Heymans, Patrick and Schobbens, Pierre-Yves and Legay, Axel and Raskin, Jean-Francois},
doi = {10.1145/1806799.1806850},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Classen et al. - 2010 - Model checking lots of systems efficient verification of temporal properties in software product lines.pdf:pdf},
isbn = {978-1-60558-719-6},
issn = {0270-5257},
journal = {2010 ACM/IEEE 32nd International Conference on Software Engineering},
keywords = {features,software product lines,specification},
pages = {335--344},
title = {{Model checking lots of systems: efficient verification of temporal properties in software product lines}},
volume = {1},
year = {2010}
}
@incollection{Idelberger2016,
address = {Cham},
author = {Idelberger, Florian and Governatori, Guido and Riveret, R{\'{e}}gis and Sartor, Giovanni},
booktitle = {Lecture Notes in Computer Science},
doi = {10.1007/978-3-319-42019-6_11},
editor = {Alferes, Jose Julio and Bertossi, Leopoldo and Governatori, Guido and Fodor, Paul and Roman, Dumitru},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Idelberger et al. - 2016 - Evaluation of Logic-Based Smart Contracts for Blockchain Systems.pdf:pdf},
isbn = {978-3-319-42018-9},
keywords = {smart contract},
pages = {167--183},
publisher = {Springer International Publishing},
series = {Lecture Notes in Computer Science},
title = {{Evaluation of Logic-Based Smart Contracts for Blockchain Systems}},
url = {http://link.springer.com/10.1007/978-3-319-42019-6 http://link.springer.com/10.1007/978-3-319-42019-6{\_}11},
volume = {9718},
year = {2016}
}
@misc{Shaul2018,
author = {Kfir, Shaul},
booktitle = {DAML series},
title = {{Distributed ledgers need more than traditional application design patterns}},
url = {https://medium.com/daml-driven/distributed-ledgers-need-more-than-traditional-applications-design-patterns-e2d895d767ff},
urldate = {2018-08-17},
year = {2018}
}
@misc{BitcoinWiki2018Script,
author = {{Bitcoin Wiki}},
title = {{Script}},
url = {https://en.bitcoin.it/wiki/Script{\#}Opcodes},
urldate = {2018-06-27},
year = {2018}
}
@article{Stefanescu2016,
abstract = {We present a language-independent verification framework that can be instantiated with an operational semantics to automatically generate a program verifier. The framework treats both the operational semantics and the program correctness specifications as reachability rules between matching logic patterns, and uses the sound and relatively complete reachability logic proof system to prove the specifications using the semantics. We instantiate the framework with the semantics of one academic language, KernelC, as well as with three recent semantics of real-world languages, C, Java, and JavaScript, developed independently of our verification infrastructure. We evaluate our approach empirically and show that the generated program verifiers can check automatically the full functional correctness of challenging heap-manipulating programs implementing operations on list and tree data structures, like AVL trees. This is the first approach that can turn the operational semantics of real-world languages into correct-by-construction automatic verifiers.},
author = {Stefănescu, Andrei and Park, Daejun and Yuwen, Shijiao and Li, Yilong and Roşu, Grigore},
doi = {10.1145/3022671.2984027},
file = {:home/nud3l/share/knowledge/stefanescu-park-yuwen-li-rosu-2016-oopsla-public.pdf:pdf},
isbn = {9781450344449},
issn = {03621340},
journal = {ACM SIGPLAN Notices},
keywords = {languages,theory,verification},
number = {10},
pages = {74--91},
title = {{Semantics-based program verifiers for all languages}},
url = {http://dl.acm.org/citation.cfm?doid=3022671.2984027},
volume = {51},
year = {2016}
}
@techreport{Poon2016,
abstract = {The bitcoin protocol can encompass the global financial transac-tion volume in all electronic payment systems today, without a single custodial third party holding funds or requiring participants to have anything more than a computer using a broadband connection. A decentralized system is proposed whereby transactions are sent over a network of micropayment channels (a.k.a. payment channels or transaction channels) whose transfer of value occurs off-blockchain. If Bitcoin transactions can be signed with a new sighash type that addresses malleability, these transfers may occur between untrusted parties along the transfer route by contracts which, in the event of un-cooperative or hostile participants, are enforceable via broadcast over the bitcoin blockchain in the event of uncooperative or hostile partici-pants, through a series of decrementing timelocks.},
author = {Poon, Joseph and Dryja, Thaddeus},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Poon, Dryja - 2016 - The Bitcoin Lightning Network Scalable Off-Chain Instant Payments.pdf:pdf},
pages = {59},
title = {{The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments}},
url = {https://lightning.network/lightning-network-paper.pdf},
year = {2016}
}
@inproceedings{Atzei2017,
abstract = {Smart contracts are computer programs that can be correctly executed by a network of mutually distrusting nodes, without the need of an external trusted authority. Since smart contracts handle and transfer assets of considerable value, besides their correct execution it is also crucial that their implementation is secure against attacks which aim at stealing or tampering the assets. We study this problem in Ethereum, the most well-known and used framework for smart contracts so far. We analyse the security vulnerabilities of Ethereum smart contracts, providing a taxonomy of common programming pitfalls which may lead to vulnerabilities. We show a series of attacks which exploit these vulnera-bilities, allowing an adversary to steal money or cause other damage.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Atzei, Nicola and Bartoletti, Massimo and Cimoli, Tiziana},
booktitle = {POST},
doi = {10.1007/978-3-662-54455-6_8},
eprint = {arXiv:1011.1669v3},
file = {:home/nud3l/share/knowledge/6e3f36c4282a189249523a5e88577739b736.pdf:pdf},
isbn = {9783662544549},
issn = {16113349},
number = {July},
pages = {164--186},
pmid = {21675331},
title = {{A survey of attacks on Ethereum smart contracts (SoK)}},
volume = {10204 LNCS},
year = {2017}
}
@inproceedings{Pontiveros2018,
abstract = {In this work we propose a compression method for smart contracts deployed in the Ethereum blockchain. By taking advantage of the repetition of sections of bytecode among multiple smart contracts previously deployed in the Ethereum blockchain we propose a new pseudo opcode that acts as a pointer that will allow smart contracts to reuse previously deployed code. We show that our proposed algorithm achieves space savings of up to 75{\%} in a dataset of deployed Ethereum smart contracts bytecode, on par with other state of the art compression algorithms while remaining compatible with other methods currently in use for space reduction.},
author = {Pontiveros, Beltran Borja Fiz and Norvill, Robert and State, Radu},
booktitle = {2018 9th IFIP International Conference on New Technologies, Mobility and Security, NTMS 2018},
doi = {10.1109/NTMS.2018.8328742},
file = {:home/nud3l/share/knowledge/08328742.pdf:pdf},
isbn = {9781538636626},
pages = {1--5},
title = {{Recycling Smart Contracts: Compression of the Ethereum Blockchain}},
volume = {January},
year = {2018}
}
@inproceedings{Hvitved2010,
abstract = {In this short paper we present the current status on formal languages and models for contracts. By a formal model is meant an unambiguous and rigorous representation of contracts, in order to enable their automatic validation, execution, and analysis — activates that are collectively referred to as contract lifecycle management (CLM).We present a set of formalism requirements, which represent features that any ideal contract model should support, based on which we present a comparative survey of existing contract formalisms.},
author = {Hvitved, Tom},
booktitle = {4th International Workshop on Formal Languages and Analysis of Contract-Oriented Software, 2010},
file = {:home/nud3l/share/knowledge/10.1.1.724.3744.pdf:pdf},
pages = {29--32},
title = {{A Survey of Formal Languages for Contracts}},
year = {2010}
}
@inproceedings{Grishchenko2018,
author = {Grishchenko, Ilya and Maffei, Matteo and Schneidewind, Clara},
booktitle = {Principles of Security and Trust},
doi = {10.1007/978-3-319-89722-6_10},
file = {:home/nud3l/share/knowledge/Grishchenko2018{\_}Chapter{\_}ASemanticFrameworkForTheSecuri.pdf:pdf},
isbn = {978-3-662-54454-9},
pages = {243--269},
publisher = {Springer International Publishing},
title = {{A Semantic Framework for the Security Analysis of Ethereum Smart Contracts}},
volume = {10804},
year = {2018}
}
@inproceedings{Grigg2004,
author = {Grigg, Ian},
booktitle = {Proceedings. First IEEE International Workshop on Electronic Contracting, 2004.},
doi = {10.1109/WEC.2004.1319505},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Grigg - 2004 - The Ricardian contract.pdf:pdf},
isbn = {0-7695-2184-3},
pages = {25--31},
publisher = {IEEE},
title = {{The Ricardian contract}},
url = {http://iang.org/papers/ricardian{\_}contract.html http://ieeexplore.ieee.org/document/1319505/},
year = {2004}
}
@inproceedings{Baldoni2015,
abstract = {We consider the design and enactment of multi-agent protocols that describe collaboration using " normative " or " social " abstractions, specifically, commitments. A (multiagent) protocol defines the relevant social states and how they progress; each participant maintains a local projection of these states and acts accordingly. Protocols expose two important challenges: (1) how to compose them in a way that respects commitments and (2) how to verify the compliance of the parties with the so-cial states. Individually, these challenges are inad-equately studied and together not at all. We motivate the notion of a social context to cap-ture how a protocol may be enacted. A protocol can be verifiably enacted when its participants can de-termine each other's compliance. We first show the negative result that even when protocols can be ver-ifiably enacted in respective social contexts, their composition cannot be verifiably enacted in the composition of those social contexts. We next show how to expand such a protocol so that it can be verifiably enacted. Our approach involves design rules to specify composite protocols so they would be verifiably enactable. Our approach demonstrates a use of dialectical commitments, which have pre-viously been overlooked in the protocols literature.},
author = {Baldoni, Matteo and Baroglio, Cristina and Chopra, Amit K and Singh, Munindar P},
booktitle = {IJCAI International Joint Conference on Artificial Intelligence},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Baldoni et al. - 2015 - Composing and verifying commitment-based multiagent protocols.pdf:pdf},
isbn = {9781577357384},
issn = {10450823},
keywords = {Technical Papers — Agent and Multi-Agent Systems},
number = {Ijcai},
pages = {10--17},
title = {{Composing and verifying commitment-based multiagent protocols}},
volume = {2015-Janua},
year = {2015}
}
@inproceedings{Kalra2018,
abstract = {A smart contract is hard to patch for bugs once it is deployed, irrespective of the money it holds. A recent bug caused losses worth around {\$}50 million of cryptocurrency. We present ZEUS—a framework to verify the correctness and validate the fairness of smart contracts. We consider correctness as adherence to safe programming practices, while fairness is adherence to agreed upon higher-level business logic. ZEUS leverages both abstract interpretation and symbolic model checking, along with the power of constrained horn clauses to quickly verify contracts for safety. We have built a prototype of ZEUS for Ethereum and Fabric blockchain platforms, and evaluated it with over 22.4K smart contracts. Our evaluation indicates that about 94.6{\%} of contracts (containing cryptocurrency worth more than {\$}0.5 billion) are vulnerable. ZEUS is sound with zero false negatives and has a low false positive rate, with an order of magnitude improvement in analysis time as compared to prior art.},
address = {Reston, VA},
author = {Kalra, Sukrit and Goel, Seep and Dhawan, Mohan and Sharma, Subodh},
booktitle = {Proceedings 2018 Network and Distributed System Security Symposium},
doi = {10.14722/ndss.2018.23082},
file = {:home/nud3l/share/knowledge/ndss2018{\_}09-1{\_}Kalra{\_}paper.pdf:pdf},
isbn = {1-891562-49-5},
number = {February},
publisher = {Internet Society},
title = {{ZEUS: Analyzing Safety of Smart Contracts}},
url = {http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018{\_}09-1{\_}Kalra{\_}paper.pdf},
year = {2018}
}
@unpublished{Tsankov2017,
archivePrefix = {arXiv},
arxivId = {arXiv:1806.01143v1},
author = {Tsankov, Petar and Dan, Andrei and Drachsler-Cohen, Dana and Gervais, Arthur and B{\"{u}}nzli, Florian and Vechev, Martin},
eprint = {arXiv:1806.01143v1},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Tsankov et al. - 2018 - Securify Practical Security Analysis of Smart Contracts.pdf:pdf},
number = {August},
title = {{Securify: Practical Security Analysis of Smart Contracts}},
year = {2018}
}
@misc{Reitwiessner2015Why3,
author = {Reitwiessner, Christian},
title = {{Formal Verification for Solidity Contracts}},
url = {https://forum.ethereum.org/discussion/3779/formal-verification-for-solidity-contracts},
urldate = {2018-09-15},
year = {2015}
}
@misc{DynamicLedgerSolutions2017,
author = {{Dynamic Ledger Solutions}},
title = {{Michelson: the language of Smart Contracts in Tezos}},
url = {https://www.michelson-lang.com/},
urldate = {2018-05-10},
year = {2017}
}
@article{Bonneau2015,
abstract = {Bitcoin has emerged as the most successful crypto-graphic currency in history. Within two years of its quiet launch in 2009, Bitcoin grew to comprise billions of dollars of economic value despite only cursory analysis of the system's design. Since then a growing literature has identified hidden-but-important properties of the system, discovered attacks, proposed promis-ing alternatives, and singled out difficult future challenges. Meanwhile a large and vibrant open-source community has proposed and deployed numerous modifications and extensions. We provide the first systematic exposition Bitcoin and the many related cryptocurrencies or 'altcoins.' Drawing from a scattered body of knowledge, we identify three key components of Bitcoin's design that can be decoupled. This enables a more insightful analysis of Bitcoin's properties and future stability. We map the design space for numerous proposed modifica-tions, providing comparative analyses for alternative consensus mechanisms, currency allocation mechanisms, computational puzzles, and key management tools. We survey anonymity issues in Bitcoin and provide an evaluation framework for analyzing a variety of privacy-enhancing proposals. Finally we provide new insights on what we term disintermediation protocols, which absolve the need for trusted intermediaries in an interesting set of applications. We identify three general disintermediation strategies and provide a detailed comparison. I. WHY BITCOIN IS WORTHY OF RESEARCH Consider two opposing viewpoints on Bitcoin in straw-man form. The first is that " Bitcoin works in practice, but not in theory. " At times devoted members of the Bitcoin community espouse this philosophy and criticize the security research community for failing to discover Bitcoin, not im-mediately recognizing its novelty, and still today dismissing it due to the lack of a rigorous theoretical foundation. A second viewpoint is that Bitcoin's stability relies on an unknown combination of socioeconomic factors which is hopelessly intractable to model with sufficient precision, failing to yield a convincing argument for the system's soundness. Given these difficulties, experienced security re-searchers may avoid Bitcoin as a topic of study, considering it prudent security engineering to only design systems with precise threat models that admit formal security proofs. We intend to show where each of these simplistic view-points fail. To the first, we contend that while Bitcoin has worked surprisingly well in practice so far, there is an im-portant role for research to play in identifying precisely why this has been possible, moving beyond a blind acceptance of the informal arguments presented with the system's initial proposal. Furthermore, it is crucial to understand whether Bitcoin will still " work in practice " as practices change. We expect external political and economic factors to evolve, the system must change if and when transaction volume scales, and the nature of the monetary rewards for Bitcoin miners will change over time as part of the system design. It is not enough to argue that Bitcoin has worked from 2009– 2014 and will therefore continue likewise. We do not yet have sufficient understanding to conclude with confidence that Bitcoin will continue to work well in practice, which is a crucial research challenge that requires insight from computer science theory. To the second viewpoint, we contend that Bitcoin is filling an important niche by providing a virtual currency system without any trusted parties and without pre-assumed identities among the participants. Within these constraints, the general problem of consensus in a distributed system is impossible [7], [93] without further assumptions like Bitcoin's premise that rational (greedy) behavior can be modeled and incentives can be aligned to ensure secure operation of the consensus algorithm. Yet these constraints matter in practice, both philosophically and technically, and Bitcoin's approach to consensus within this model is deeply surprising and a fundamental contribution. Bitcoin's core consensus protocol also has profound implications for many other computer security problems beyond currency 1 such as distributed naming, secure timestamping and commitment, generation of public randomness, as well as many finan-cial problems such as self-enforcing (" smart ") contracts, decentralized markets and order books, and distributed au-tonomous agents. In short, even though Bitcoin is not easy to model, it is worthy of considerable research attention as it may form the basis for practical solutions to exceedingly difficult and important problems. With this dichotomy in mind, we set out to synthesize the collective knowledge from the first six years of Bitcoin's operation and development, as well as from its many derived cryptocurrencies. Our goal is both to highlight the many areas where significant innovation has already occurred, ranging from novel payment protocols to user-friendly key management, and also highlight the most important open research challenges for Bitcoin and future cryptocurrencies.},
author = {Bonneau, Joseph and Miller, Andrew and Clark, Jeremy and Narayanan, Arvind and Kroll, Joshua A and Felten, Edward W},
doi = {10.1109/SP.2015.14},
file = {:home/nud3l/share/knowledge/BMCNKF15-IEEESP-bitcoin.pdf:pdf},
isbn = {978-1-4673-6949-7},
issn = {1081-6011},
journal = {IEEE Symposium on Security and Privacy},
pages = {104--121},
title = {{Research Perspectives and Challenges for Bitcoin and Cryptocurrencies}},
url = {https://www.cs.princeton.edu/{~}kroll/papers/oakland15{\_}bitcoin-sok.pdf},
year = {2015}
}
@article{Braga2009,
abstract = {Current interests in the context of system development include non-functional aspects of an application and the quality of the service (QoS) it provides. In video on demand applications, for instance, properties such as delay, bandwidth and CPU utilization are monitored in order to identify if they are within acceptable limits. In our approach, non-functional requirements are described by contracts. A contract specifies acceptable variations on the availability of these properties and how service replacement can be negotiated to keep the QoS of the application within the acceptable limits. In this paper we give an operational semantics for QoS contracts and report its implementation in a prototype tool that allows us to execute and analyze QoS contracts. The QoS Tool, our prototype, transforms QoS contract descriptions into modular structural operational semantics (MSOS) specifications. MSOS specifications are executable and analyzable in the Maude MSOS Tool, which uses efficient rewriting to execute, search and model checking MSOS specifications. We exemplify how the QoS Tool can be used by analyzing a video on demand application against real data. {\textcopyright} 2009 Elsevier B.V. All rights reserved.},
author = {Braga, Christiano and Chalub, Fabricio and Sztajnberg, Alexandre},
doi = {10.1016/j.entcs.2009.03.029},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Braga, Chalub, Sztajnberg - 2009 - A Formal Semantics for a Quality of Service Contract Language.pdf:pdf},
issn = {15710661},
journal = {Electronic Notes in Theoretical Computer Science},
keywords = {MSOS,Maude,QoS contracts,software architecture description languages},
number = {7},
pages = {103--120},
publisher = {Elsevier B.V.},
title = {{A Formal Semantics for a Quality of Service Contract Language}},
url = {http://dx.doi.org/10.1016/j.entcs.2009.03.029},
volume = {203},
year = {2009}
}
@unpublished{Schrans2018,
author = {Schrans, Franklin and Eisenbach, Susan and Drossopoulou, Sophia},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Schrans, Eisenbach, Drossopoulou - 2018 - Writing Safe Smart Contracts in Flint.pdf:pdf},
isbn = {9781450355131},
title = {{Writing Safe Smart Contracts in Flint}},
year = {2018}
}
@techreport{Hildenbrandt2017,
abstract = {A developing field of interest for the distributed systems and applied cryptography community is that of smart contracts: self-executing financial instruments that synchronize their state, often through a blockchain. One such smart contract system that has seen widespread practical adoption is Ethereum, which has grown to secure approximately 30 billion USD of currency value and in excess of 300,000 daily transactions. Unfortunately, the rise of these technologies has been marred by a repeated series of security vulnerabilities and high profile contract failures. To address these failures, the Ethereum community has turned to formal verification and program analysis which show great promise due to the computational simplicity and bounded-time execution inherent to smart contracts. Despite this, no fully formal, rigorous, comprehensive, and executable semantics of the EVM (Ethereum Virtual Machine) currently exists, leaving a lack of rigor on which to base such tools. In this work, we present KEVM, the first fully executable formal semantics of the EVM, the bytecode language in which smart contracts are executed. We create this semantics in a framework for executable semantics, the K framework. We show that our semantics not only passes the official 40,683-test stress test suite for EVM implementations, but also reveals ambiguities and potential sources of error in the existing on-paper formalization of EVM semantics [45] on which our work is based. These properties make KEVM an ideal formal reference implementation against which other implementations can be evaluated. We proceed to argue for a semantics-first formal verification approach for EVM contracts, and demonstrate its practicality by using KEVM to verify practically important properties over the arithmetic operation of an example smart contract and the correct operation of a token transfer function in a second contract. We show that our approach is feasible and not computationally restrictive. We hope that our work serves as the base for the development of a wide range of useful formally derived tools for Ethereum, including model checkers, certified compilers, and program equivalence checkers.},
author = {Hildenbrandt, Everett and Saxena, Manasvi and Zhu, Xiaoran and Rodrigues, Nishant and Daian, Philip and Guth, Dwight and Rosu, Grigore},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hildenbrandt et al. - 2017 - KEVM A Complete Semantics of the Ethereum Virtual Machine.pdf:pdf},
pages = {1--33},
title = {{KEVM: A Complete Semantics of the Ethereum Virtual Machine}},
url = {http://hdl.handle.net/2142/97207},
year = {2017}
}
@misc{OCamlProSAS2018,
author = {{OCamlPro SAS}},
title = {{Welcome to Liquidity's documentation!}},
url = {http://www.liquidity-lang.org/doc/},
urldate = {2018-09-03},
year = {2018}
}
@inproceedings{Miller2018smart,
abstract = {One of the biggest challenges in the RoboCup Soccer Standard Platform League (SPL) is autonomously achieving and maintaining an accurate estimate of a robot's position and orientation on the field. In other robotics applications many robust systems already exist for localization such as visual simultaneous localization and mapping (SLAM) and LIDAR based SLAM. These approaches either require special hardware or are very computationally expensive and are not suitable for the Nao robot, the current robot of choice for the SPL. Therefore novel approaches to localization in the RoboCup SPL environment are required. In this paper we present a new approach to localization in the SPL which relies primarily on the information contained within white field markings while being efficient enough to run in real time on board a Nao robot. {\textcopyright} 2012 Springer-Verlag.},
address = {Berlin, Heidelberg},
author = {Miller, Andrew and Cai, Zhicheng and Jha, Somesh},
booktitle = {Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. ISoLA 2018},
doi = {10.1007/978-3-030-03427-6_22},
editor = {Margaria, Tiziana and Steffen, Bernhard},
file = {:home/nud3l/share/knowledge/Miller2018{\_}Chapter{\_}SmartContractsAndOpportunities.pdf:pdf},
isbn = {978-3-642-34031-4},
issn = {18650929},
pages = {280--299},
pmid = {4520227},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{Smart Contracts and Opportunities for Formal Methods}},
url = {http://link.springer.com/10.1007/978-3-642-34032-1 http://link.springer.com/10.1007/978-3-030-03427-6{\_}22},
volume = {7610},
year = {2018}
}
@misc{Szabo1997,
author = {Szabo, Nick},
title = {{Formalizing and Securing Relationships on Public Networks.}},
url = {http://ojphi.org/ojs/index.php/fm/article/view/548/469},
urldate = {2017-04-07},
year = {1997}
}
@techreport{Mueller2018,
author = {Mueller, Bernhard},
file = {:home/nud3l/share/knowledge/smashing-smart-contracts-1of1.pdf:pdf},
isbn = {0000000000000},
pages = {1--54},
title = {{Smashing Ethereum Smart Contracts for Fun and Real Profit}},
year = {2018}
}
@unpublished{Wood2014,
abstract = {The blockchain paradigm when coupled with cryptographically-secured transactions has demonstrated its utility through a number of projects, not least Bitcoin. Each such project can be seen as a simple application on a decentralised, but singleton, compute resource. We can call this paradigm a transactional singleton machine with shared-state. Ethereum implements this paradigm in a generalised manner. Furthermore it provides a plurality of such resources, each with a distinct state and operating code but able to interact through a message-passing framework with others. We discuss its design, implementation issues, the opportunities it provides and the future hurdles we envisage.},
author = {Wood, Gavin},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wood - 2014 - Ethereum a secure decentralised generalised transaction ledger.pdf:pdf},
pages = {1--32},
title = {{Ethereum: a secure decentralised generalised transaction ledger}},
year = {2014}
}
@inproceedings{Amani2018,
abstract = {Blockchain technology has increasing attention in research and across many industries. The Ethereum blockchain offers smart contracts, which are small programs defined, executed, and recorded as transactions in the blockchain transaction history. These smart contracts run on the Ethereum Virtual Machine (EVM) and can be used to encode agreements, trans-fer assets, and enforce integrity conditions in relationships between parties. Smart contracts can carry financial value, and are increasingly used for safety-, security-, or mission-critical purposes. Errors in smart contracts have led and will lead to loss or harm. Formal verification can provide the highest level of confidence about the correct behaviour of smart contracts. In this paper we extend an existing EVM formalisation in Isabelle/HOL by a sound program logic at the level of bytecode. We structure bytecode sequences into blocks of straight-line code and create a program logic to reason about these. This abstraction is a step towards con-trol of the cost and complexity of formal verification of EVM smart contracts.},
address = {New York, New York, USA},
author = {Amani, Sidney and B{\'{e}}gel, Myriam and Bortin, Maksym and Staples, Mark},
booktitle = {Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs - CPP 2018},
doi = {10.1145/3167084},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Amani et al. - 2018 - Towards verifying ethereum smart contract bytecode in IsabelleHOL.pdf:pdf},
isbn = {9781450355865},
keywords = {acm reference format,and mark staples,blockchain,ethereum,formal verification,hol,isabelle,maksym bortin,myriam b{\'{e}}gel,sidney amani,smart contracts},
number = {i},
pages = {66--77},
publisher = {ACM Press},
title = {{Towards verifying ethereum smart contract bytecode in Isabelle/HOL}},
url = {http://dl.acm.org/citation.cfm?doid=3176245.3167084},
volume = {61},
year = {2018}
}
@unpublished{Albert2018,
abstract = {Analyzing Ethereum bytecode, rather than the source code from which it was generated, is a necessity when: (1) the source code is not available (e.g., the blockchain only stores the bytecode), (2) the information to be gathered in the analysis is only visible at the level of bytecode (e.g., gas consumption is specified at the level of EVM instructions), (3) the analysis results may be affected by optimizations performed by the compiler (thus the analysis should be done ideally after compilation). This paper presents EthIR, a framework for analyzing Ethereum bytecode, which relies on (an extension of) OYENTE, a tool that generates CFGs; EthIR produces from the CFGs, a rule-based representation (RBR) of the bytecode that enables the application of (existing) high-level analyses to infer properties of EVM code.},
archivePrefix = {arXiv},
arxivId = {1805.07208},
author = {Albert, Elvira and Gordillo, Pablo and Livshits, Benjamin and Rubio, Albert and Sergey, Ilya},
eprint = {1805.07208},
file = {:home/nud3l/share/knowledge/1805.07208.pdf:pdf},
title = {{EthIR: A Framework for High-Level Analysis of Ethereum Bytecode}},
year = {2018}
}
@techreport{Wood2017,
abstract = {Present-day blockchain architectures all suffer from a number of issues not least practical means of extensi-bility and scalability. We believe this stems from tying two very important parts of the consensus architecture, namely canonicality and validity, too closely together. This paper introduces an architecture, the heterogeneous multi-chain, which fundamentally sets the two apart. In compartmentalising these two parts, and by keeping the overall functionality provided to an absolute minimum of security and transport, we introduce practical means of core extensibility in situ. Scalability is addressed through a divide-and-conquer approach to these two functions, scaling out of its bonded core through the incentivisation of untrusted public nodes. The heterogeneous nature of this architecture enables many highly divergent types of consensus systems interop-erating in a trustless, fully decentralised " federation " , allowing open and closed networks to have trust-free access to each other. We put forward a means of providing backwards compatibility with one or more pre-existing networks such as Ethereum. We believe that such a system provides a useful base-level component in the overall search for a practically implementable system capable of achieving global-commerce levels of scalability and privacy.},
author = {Wood, Gavin},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wood - 2017 - Polkadot Vision for a Heterogeneous Multi-Chain Framework.pdf:pdf},
pages = {1--21},
title = {{Polkadot: Vision for a Heterogeneous Multi-Chain Framework}},
url = {https://github.com/w3f/polkadot-white-paper/raw/master/PolkaDotPaper.pdf},
year = {2017}
}
@unpublished{Nikolic2018,
abstract = {Smart contracts---stateful executable objects hosted on blockchains like Ethereum---carry billions of dollars worth of coins and cannot be updated once deployed. We present a new systematic characterization of a class of trace vulnerabilities, which result from analyzing multiple invocations of a contract over its lifetime. We focus attention on three example properties of such trace vulnerabilities: finding contracts that either lock funds indefinitely, leak them carelessly to arbitrary users, or can be killed by anyone. We implemented MAIAN, the first tool for precisely specifying and reasoning about trace properties, which employs inter-procedural symbolic analysis and concrete validator for exhibiting real exploits. Our analysis of nearly one million contracts flags 34,200 (2,365 distinct) contracts vulnerable, in 10 seconds per contract. On a subset of3,759 contracts which we sampled for concrete validation and manual analysis, we reproduce real exploits at a true positive rate of 89{\%}, yielding exploits for3,686 contracts. Our tool finds exploits for the infamous Parity bug that indirectly locked 200 million dollars worth in Ether, which previous analyses failed to capture.},
archivePrefix = {arXiv},
arxivId = {1802.06038},
author = {Nikolic, Ivica and Kolluri, Aashish and Sergey, Ilya and Saxena, Prateek and Hobor, Aquinas},
doi = {arXiv:1802.06038v1},
eprint = {1802.06038},
file = {:home/nud3l/share/knowledge/1802.06038.pdf:pdf},
title = {{Finding The Greedy, Prodigal, and Suicidal Contracts at Scale}},
url = {http://arxiv.org/abs/1802.06038},
year = {2018}
}
@unpublished{Teutsch2017,
author = {Teutsch, Jason and Reitwie{\ss}ner, Christian},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Teutsch, Reitwie{\ss}ner - 2017 - A scalable verification solution for blockchains.pdf:pdf},
pages = {1--44},
title = {{A scalable verification solution for blockchains}},
year = {2017}
}
@unpublished{Cachin2016,
abstract = {Overview. A blockchain is best understood in the model of state-machine replication [8], where a service maintains some state and clients invoke operations that transform the state and generate outputs. A blockchain emulates a " trusted " computing service through a distributed protocol, run by nodes con-nected over the Internet. The service represents or creates an asset, in which all nodes have some stake. The nodes share the common goal of running the service but do not necessarily trust each other for more. In a " permissionless " blockchain such as the one underlying the Bitcoin cryptocurrency, anyone can operate a node and participate through spending CPU cycles and demonstrating a " proof-of-work. " On the other hand, blockchains in the " permissioned " model control who participates in validation and in the protocol; these nodes typically have established identities and form a consortium. A report of Swanson compares the two models [9]. Hyperledger. The Hyperledger Project (www.hyperledger.org) is a collaborative effort to cre-ate an enterprise-grade, open-source distributed ledger framework and code base. It aims to advance blockchain technology by identifying and realizing a cross-industry open standard platform for dis-tributed ledgers, which can transform the way business transactions are conducted globally. Established as a project of the Linux Foundation in early 2016, the Hyperledger Project currently has more than 50 members. Hyperledger Fabric. Hyperledger Fabric (github.com/hyperledger/fabric) is an imple-mentation of a distributed ledger platform for running smart contracts, leveraging familiar and proven technologies, with a modular architecture allowing pluggable implementations of various functions. It is one of multiple projects currently in incubation under the Hyperledger Project. A developer-preview of the Hyperledger Fabric (called " v0.5-developer-preview ") has been released in June 2016 (github.com/hyperledger/fabric/wiki/Fabric-Releases). The distributed ledger protocol of the fabric is run by peers. The fabric distinguishes between two kinds of peers: A validating peer is a node on the network responsible for running consensus,},
author = {Cachin, Christian},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Cachin - 2016 - Architecture of the hyperledger blockchain fabric.pdf:pdf},
institution = {IBM Research},
title = {{Architecture of the hyperledger blockchain fabric}},
year = {2016}
}
@misc{ParityTech2017,
author = {{Parity Tech}},
title = {{A Postmortem on the Parity Multi-Sig Library Self-Destruct}},
url = {https://paritytech.io/a-postmortem-on-the-parity-multi-sig-library-self-destruct/},
urldate = {2018-09-03},
year = {2017}
}
@article{Lattner2004,
author = {Lattner, Chris and Adve, Vikram},
file = {:home/nud3l/share/knowledge/2004-01-30-CGO-LLVM.pdf:pdf},
isbn = {0769521029},
journal = {Proceedings of the International Symposium on Code Generation and Optimization (CGO)},
title = {{LLVM: A Compilation Framework for Lifelong Program Analysis and Transformation}},
year = {2004}
}
@article{Meyer1992,
author = {Meyer, Bertrand},
doi = {10.1109/2.161279},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Meyer - 1992 - Applying 'design by contract'.pdf:pdf},
issn = {0018-9162},
journal = {Computer},
month = {oct},
number = {10},
pages = {40--51},
title = {{Applying 'design by contract'}},
url = {http://ieeexplore.ieee.org/document/161279/},
volume = {25},
year = {1992}
}
@misc{Lochbihler2018,
author = {Lochbihler, Andreas},
booktitle = {DAML series},
title = {{How difficult is it to write correct smart contracts? Depends on your tools!}},
url = {https://medium.com/daml-driven/how-difficult-is-it-to-write-correct-smart-contracts-depends-on-your-tools-5f6bceb2d510},
urldate = {2018-08-31},
year = {2018}
}
@incollection{Bartoletti2017,
abstract = {Motivation. Public ledger is a decentralized book keeping technology and is believed to have the potential to revolutionize many areas. Besides handling crypto-currency, public ledger can be used to tokenize arbitrary assets, and then support trading of these asset tokens in a decentralized manner. With public ledger based token trading system, users do not necessarily convert their assets to currencies, but can exchange assets directly. It also avoids unnecessary transportation as the asset only needs to be physically transferred to its last owner. Furthermore, utilization of the public ledger does not require that users have to trust each other in order to trade tokens safely. However, using decentralized public ledger for trading asset tokens raises serious privacy concerns. Because token ownership information is stored on the public ledger and disclosed to the public, anyone can uncover users trading activities and history. For a token based asset trading platform, all tokens are unique and transactions are usually two-ways or multi-ways. In response to these challenges, we propose ZeroTrade, a privacy respecting heterogeneous assets trading system that leverages various cryptography tools to conceal the exchange trace of asset tokens and takes advantage of public ledger for guaranteeing fairness of asset token exchange. Solution. ZeroTrade involves trusted hubs that are responsible for converting assets to tokens and back, where trusted means that hubs will generate/accept valid tokens, and uses the public ledger to record all token exchange information. When two or more users want to exchange tokens with each other, each user picks an agent for the exchange. Asset tokens are first poured into a pool and users leverage agents to obliviously retrieve tokens from the pool in order to finish the exchange. The oblivious retrieving process cut off the connection between the original user and the agent. Therefore, one cannot determine the relationship between the original users who want to exchange tokens by observing information recorded on the public ledger. To implement the design, ZeroTrade leverages different cryptography tools including zero-knowledge proof and various encryption techniques. Considering various demands in token trade, ZeroTrade also supports operations like partial token trade and revocation. A preliminary evaluation of the performance shows that ZeroTrade only adds limited burden on top of the public ledger. More detailed information can be found in the full version of the paper. Conclusion. ZeroTrade provides a privacy friendly platform for asset trading based on public ledger. For the next step, we plan to implement a fully functional prototype and considering more complex token trading scenarios. {\textcopyright} International Financial Cryptography Association 2017.},
address = {Cham},
author = {Bartoletti, Massimo and Pompianu, Livio},
booktitle = {Lecture Notes in Computer Science},
doi = {10.1007/978-3-319-70278-0_31},
file = {:home/nud3l/share/knowledge/Bartoletti-Pompianu2017{\_}Chapter{\_}AnEmpiricalAnalysisOfSmartCont.pdf:pdf},
isbn = {978-3-319-70277-3},
issn = {16113349},
pages = {494--509},
title = {{An Empirical Analysis of Smart Contracts: Platforms, Applications, and Design Patterns}},
url = {http://link.springer.com/10.1007/978-3-319-70278-0},
volume = {10323},
year = {2017}
}
@article{Andersen2006,
abstract = {We present a declarative language for compositional specification of contracts governing the exchange of resources. It extends Eber and Peyton Jones's declarative language for specifying financial contracts (Jones et al. in The Fun of Programming. 2003) to the exchange of money, goods and services amongst multiple parties and complements McCarthy's Resources, Events and Agents (REA) accounting model (McCarthy in Account Rev. LVII(3), 554-578, 1982) with a view- independent formal contract model that supports definition of user-defined contracts, automatic monitoring under execution and user-definable analysis of their state before, during and after execution. We provide several realistic examples of commercial contracts and their analyses. A variety of (real) contracts can be expressed in such a fashion as to support their integration, management and analysis in an operational environment that registers events. The language design is driven by both domain considerations and semantic language design methods: a contract denotes a set of traces of events, each of which is an alternative way of concluding the contract successfully, which gives rise to a CSP-style (Brooker et al. in J.ACM 31(3), 560-599, 1984; Hoare in Communicating Sequential Processes, 1985) denotational semantics. The denotational semantics drives the development of a sound and complete small-step operational semantics, where a partially executed contract is represented as a (full) contract that represents the remaining contractual commitments. This operational semantics is then systematically refined in two stages to an instrumented operational semantics that reflects the bookkeeping practice of identifying the specific contractual commitment a particular event matches at the time the event occurs, as opposed to delaying this matching until the contract is concluded. [PUBLICATION ABSTRACT]},
author = {Andersen, Jesper and Elsborg, Ebbe and Henglein, Fritz and Simonsen, Jakob Grue and Stefansen, Christian},
doi = {10.1007/s10009-006-0010-1},
file = {:home/nud3l/share/knowledge/Andersen2006{\_}Article{\_}CompositionalSpecificationOfCo.pdf:pdf;:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Andersen et al. - 2006 - Compositional specification of commercial contracts.pdf:pdf},
isbn = {1000900600101},
issn = {1433-2779},
journal = {International Journal on Software Tools for Technology Transfer},
month = {oct},
number = {6},
pages = {485--516},
title = {{Compositional specification of commercial contracts}},
url = {http://link.springer.com/10.1007/s10009-006-0010-1},
volume = {8},
year = {2006}
}
@misc{Bleikertz2018,
author = {Bleikertz, S{\"{o}}ren},
booktitle = {DAML series},
title = {{Smart contract language: the real arbiter of truth?}},
url = {https://medium.com/daml-driven/smart-contract-language-the-real-arbiter-of-truth-efe833031ca1},
urldate = {2018-08-31},
year = {2018}
}
@inproceedings{Sergey2017,
abstract = {In this paper, we explore remarkable similarities between multi-transactional behaviors of smart contracts in cryptocurrencies such as Ethereum and classical problems of shared-memory concurrency. We examine two real-world examples from the Ethereum blockchain and analyzing how they are vulnerable to bugs that are closely reminiscent to those that often occur in traditional concurrent programs. We then elaborate on the relation between observable contract behaviors and well-studied concurrency topics, such as atomicity, interference, synchronization, and resource ownership. The described contracts-as-concurrent-objects analogy provides deeper understanding of potential threats for smart contracts, indicate better engineering practices, and enable applications of existing state-of-the-art formal verification techniques.},
archivePrefix = {arXiv},
arxivId = {1702.05511},
author = {Sergey, Ilya and Hobor, Aquinas},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-70278-0_30},
eprint = {1702.05511},
file = {:home/nud3l/share/knowledge/1702.05511.pdf:pdf},
isbn = {9783319702773},
issn = {16113349},
pages = {478--493},
title = {{A concurrent perspective on smart contracts}},
volume = {10323 LNCS},
year = {2017}
}
@article{Miller2003,
author = {Miller, Mark S and Stiegler, Marc},
doi = {10.4324/9780203180419_chapter_3},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Miller, Stiegler - 2003 - The Digital Path Smart Contracts and the Third World.pdf:pdf},
isbn = {9788799500826},
journal = {Markets, Information and Communication},
pages = {63--88},
title = {{The Digital Path: Smart Contracts and the Third World}},
url = {https://www.taylorfrancis.com/books/9780203180419},
year = {2003}
}
@inproceedings{Kyas2008,
author = {Kyas, Marcel and Prisacariu, Cristian and Schneider, Gerardo},
booktitle = {Automated Technology for Verification and Analysis. ATVA 2008.},
doi = {10.1007/978-3-540-88387-6_34},
file = {:home/nud3l/share/knowledge/Kyas2008{\_}Chapter{\_}Run-TimeMonitoringOfElectronic.pdf:pdf},
number = {2},
pages = {397--407},
title = {{Run-Time Monitoring of Electronic Contracts}},
url = {http://link.springer.com/10.1007/978-3-540-88387-6{\_}34},
year = {2008}
}
@unpublished{Hirai2016,
author = {Hirai, Yoichi},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hirai - 2016 - Formal Verification of Deed Contract in Ethereum Name Service.pdf:pdf},
pages = {1--81},
title = {{Formal Verification of Deed Contract in Ethereum Name Service}},
year = {2016}
}
@misc{Golovach2018,
author = {Golovach, Ivan},
title = {{Rholang Correct-by-Construction}},
url = {https://github.com/golovach-ivan/Correct-by-Construction},
urldate = {2018-09-15},
year = {2018}
}
@unpublished{Covaci2018,
abstract = {Blockchain-driven technologies are considered disruptive because of the availability of dis-intermediated, censorship-resistant and tamper-proof digital platforms of distributed trust. Among these technologies, smart contract platforms have the potential to take over functions usually done by intermediaries like banks, escrow or legal services. In this paper, we introduce a novel protocol aiming to execute smart contracts as part of a blockchain transaction validation. We enable extensions in the execution of smart contracts while guaranteeing their privacy, correctness and verifiability. Man-in-the-middle attacks are prevented, since no communication between participants is requested, and contract validations do not imply the re-execution of the code by all the nodes in the network. However, proofs of correct execution are stored on the blockchain and can be verified by multiple parties. Our solution is based on programming tools which optimize the time execution and the required memory while preserving the embedded functionality.},
archivePrefix = {arXiv},
arxivId = {1803.04860},
author = {Covaci, Alexandra and Madeo, Simone and Motylinski, Patrick and Vincent, St{\'{e}}phane},
doi = {10.1145/3194113.3194116},
eprint = {1803.04860},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Covaci et al. - 2018 - NECTAR Non-Interactive Smart Contract Protocol using Blockchain Technology.pdf:pdf},
keywords = {bitcoin,blockchain,interactive protocol,non-,smart contract,verifiable computation},
title = {{NECTAR: Non-Interactive Smart Contract Protocol using Blockchain Technology}},
url = {http://arxiv.org/abs/1803.04860},
year = {2018}
}
@misc{Burge2018DSL,
author = {Burge, Michael},
title = {{DSLs for Ethereum Contracts}},
url = {http://www.michaelburge.us/2018/05/15/ethereum-chess-engine.html},
urldate = {2018-09-05},
year = {2018}
}
@unpublished{Dziembowski2017,
abstract = {Payment channels emerged recently as an efficient method for performing cheap micro-payment transactions in cryptographic currencies. In contrast to the traditional on-chain transactions, payment channels have the advantage that they allow nearly unlimited number of transactions between parties without involving the blockchain. In this work, we introduce Perun, a new system for payment and state channels over cryptographic currencies, that has several advantages over the existing propos-als. In particular, Perun offers a new method for connecting channels that is more efficient than the existing technique of " routing transactions " over multiple channels. That is, in contrast to prominent existing solutions such as the Lightning Network, Perun does not require involvement of the interme-diary over which payments are routed. To achieve this, Perun introduces a new technique that we call channel virtualization, which allows to build virtual payment channels over so-called multistate channels. Multistate channels are a new primitive that we introduce as an independent concept in this work and generalizes the notion of " state channels " . Our schemes can work over any cryptocurrency that provides Turing-complete smart contracts. As a proof of concept, we implemented Perun in Ethereum.},
author = {Dziembowski, Stefan and Eckey, Lisa and Faust, Sebastian and Malinowski, Daniel},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Dziembowski et al. - 2017 - PERUN Virtual Payment Channels over Cryptographic Currencies.pdf:pdf},
pages = {1--18},
title = {{PERUN: Virtual Payment Channels over Cryptographic Currencies}},
year = {2017}
}
@misc{Daian2016,
author = {Daian, Phil},
title = {{Analysis of the DAO exploit}},
url = {http://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/},
urldate = {2016-10-09},
year = {2016}
}
@unpublished{Gupta,
author = {Gupta, Vinay and Knight, Rob and Buchanan, Aeron and Wray, Christopher and Grigg, Ian and Kuhlman, Casey and Cimpoesu, Mihai and Mainelli, Michael and Freedman, Clive},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Gupta et al. - 2018 - Smart contracts. Real property.pdf:pdf},
title = {{Smart contracts. Real property.}},
year = {2018}
}
@book{Huth2004,
author = {Huth, Michael and Ryan, Mark},
edition = {Second},
file = {:home/nud3l/share/knowledge/4d7b7d0a5ebc416b0c6f1853dd5a5a73.pdf:pdf},
isbn = {9780521543101},
publisher = {Cambridge University Press},
title = {{Logic in Computer Science: Modelling and Reasoning about Systems}},
year = {2004}
}
@inproceedings{Neal.2003,
abstract = {This paper compares two separately developed systems for monitoring activities to business contracts, describes how we integrated them and exploits the lessons learned from this process to identify a core set of requirements for a Business Contract Language (BCL). Concepts in BCL needed for contract monitoring include: the expression of coordinated concurrent actions; obliged, permitted and prohibited actions; rich timeliness expressions such as sliding windows; delegations; policy violations; contract termination/renewal conditions and reference to external data/events such as change in interest rates. The aim of BCL is to provide sufficient expressive power to describe contracts, including conditions which specify real-time processing, yet be simple enough to retain a human-oriented style for expressing contracts.},
author = {Neal, S. and Cole, J. and Linington, P.F. and Milosevic, Z. and Gibson, S. and Kulkarni, S.},
booktitle = {Seventh IEEE International Enterprise Distributed Object Computing Conference, 2003. Proceedings.},
doi = {10.1109/EDOC.2003.1233837},
file = {:home/nud3l/share/knowledge/10.1109@EDOC.2003.1233837.pdf:pdf},
isbn = {0-7695-1994-6},
issn = {15417719},
number = {January},
pages = {50--61},
publisher = {IEEE Comput. Soc},
title = {{Identifying requirements for Business Contract Language: a Monitoring Perspective}},
url = {http://ieeexplore.ieee.org/document/1233837/},
volume = {2003-Janua},
year = {2003}
}
@techreport{Palmskog2018,
author = {Palmskog, Karl and Gligoric, Milos and Pena, Lucas and Moore, Brandon and Rosu, Grigore},
file = {:home/nud3l/share/knowledge/casper-report.pdf:pdf},
title = {{Verification of Casper in the Coq Proof Assistant}},
year = {2018}
}
@misc{Harding2017,
author = {Harding, David},
title = {{What is a Bitcoin Merklized Abstract Syntax Tree (MAST)?}},
url = {https://bitcointechtalk.com/what-is-a-bitcoin-merklized-abstract-syntax-tree-mast-33fdf2da5e2f},
urldate = {2018-04-25},
year = {2017}
}
@unpublished{Lerner2015,
author = {Lerner, Sergio Demian},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lerner - 2015 - RSK white paper.pdf:pdf},
title = {{RSK white paper}},
year = {2015}
}
@inproceedings{Shi2005,
abstract = {Virtual machines (VMs) are commonly used to distribute programs in an architecture-neutral format, which can easily be interpreted or compiled. A long-running question in the design of VMs is whether stack architecture or register architecture can be implemented more efficiently with an interpreter. We extend existing work on comparing virtual stack and virtual register architectures in two ways. Firstly, our translation from stack to register code is much more sophisticated. The result is that we eliminate an average of more than 47{\%} of executed VM instructions, with the register machine bytecode size only 25{\%} larger than that of the corresponding stack bytecode. Secondly we present an implementation of a register machine in a fully standard-compliant implementation of the Java VM. We find that, on the Pentium 4, the register architecture requires an average of 32.3{\%} less time to execute standard benchmarks if dispatch is performed using a C switch statement. Even if more efficient threaded dispatch is available (which requires labels as first class values), the reduction in running time is still approximately 26.5{\%} for the register architecture.},
address = {New York, New York, USA},
author = {Shi, Yunhe and Gregg, David and Beatty, Andrew and Ertl, M Anton},
booktitle = {Proceedings of the 1st ACM/USENIX international conference on Virtual execution environments - VEE '05},
doi = {10.1145/1064979.1065001},
file = {:home/nud3l/share/knowledge/p153-yunhe.pdf:pdf},
isbn = {1595930477},
issn = {15443566},
number = {4},
pages = {153},
publisher = {ACM Press},
title = {{Virtual Machine Showdown: Stack Versus Registers}},
url = {http://portal.acm.org/citation.cfm?id=1328195.1328197 http://portal.acm.org/citation.cfm?doid=1064979.1065001},
volume = {4},
year = {2005}
}
@inproceedings{Mulligan2014,
abstract = {Recent years have seen remarkable successes in rigorous engineering: using mathematically rigorous semantic models (not just idealised calculi) of real-world processors, programming languages, protocols, and security mechanisms, for testing, proof, analysis, and design. Building these models is challenging, requiring experimentation, dialogue with vendors or standards bodies, and validation; their scale adds engineering issues akin to those of programming to the task of writing clear and usable mathematics. But language and tool support for specification is lacking. Proof assistants can be used but bring their own difficulties, and a model produced in one, perhaps requiring many person-years effort and maintained over an extended period, cannot be used by those familiar with another. We introduce Lem, a language for engineering reusable large-scale semantic models. The Lem design takes inspiration both from functional programming languages and from proof assistants, and Lem definitions are translatable into OCaml for testing, Coq, HOL4, and Isabelle/HOL for proof, and LaTeX and HTML for presentation. This requires a delicate balance of expressiveness, careful library design, and implementation of transformations - akin to compilation, but subject to the constraint of producing usable and human-readable code for each target. Lem's effectiveness is demonstrated by its use in practice.},
address = {New York, New York, USA},
author = {Mulligan, Dominic P. and Owens, Scott and Gray, Kathryn E. and Ridge, Tom and Sewell, Peter},
booktitle = {Proceedings of the 19th ACM SIGPLAN international conference on Functional programming - ICFP '14},
doi = {10.1145/2628136.2628143},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Mulligan et al. - 2014 - Lem reusable engineering of real-world semantics.pdf:pdf},
isbn = {9781450328739},
issn = {0362-1340},
keywords = {lem,proof assistants,real-world semantics,specification language,specification languages},
number = {9},
pages = {175--188},
publisher = {ACM Press},
title = {{Lem: reusable engineering of real-world semantics}},
url = {http://dl.acm.org/citation.cfm?id=2628136.2628143 http://dl.acm.org/citation.cfm?doid=2628136.2628143},
volume = {49},
year = {2014}
}
@unpublished{Clack2016,
abstract = {In this position paper, we consider some foundational topics regarding smart contracts (such as terminology, automation, enforceability, and semantics) and define a smart contract as an agreement whose execution is both automatable and enforceable. We explore a simple semantic framework for smart contracts, covering both operational and non-operational aspects. We describe templates and agreements for legally-enforceable smart contracts, based on legal documents. Building upon the Ricardian Contract triple, we identify operational parameters in the legal documents and use these to connect legal agreements to standardised code. We also explore the design landscape, including increasing sophistication of parameters, increasing use of common standardised code, and long-term academic research. We conclude by identifying further work and sketching an initial set of requirements for a common language to support Smart Contract Templates.},
archivePrefix = {arXiv},
arxivId = {1608.00771},
author = {Clack, Christopher D. and Bakshi, Vikram A. and Braine, Lee},
eprint = {1608.00771},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Clack, Bakshi, Braine - 2016 - Smart Contract Templates foundations, design landscape and research directions.pdf:pdf},
pages = {1--15},
title = {{Smart Contract Templates: foundations, design landscape and research directions}},
url = {http://arxiv.org/abs/1608.00771},
year = {2016}
}
@misc{ConsenSys2018Security,
author = {ConsenSys},
title = {{Ethereum Contract Security Techniques and Tips}},
url = {https://consensys.github.io/smart-contract-best-practices/bibliography/},
urldate = {2018-09-15},
year = {2018}
}
@techreport{OConnor2017,
abstract = {Simplicity is a typed, combinator-based, functional language without loops and recursion, designed to be used for crypto-currencies and blockchain applications. It aims to improve upon existing crypto-currency languages, such as Bitcoin Script and Ethereum's EVM, while avoiding some of the problems they face. Simplicity comes with formal denotational semantics defined in Coq, a popular, general purpose software proof assistant. Simplicity also includes operational semantics that are defined with an abstract machine that we call the Bit Machine. The Bit Machine is used as a tool for measuring the computational space and time resources needed to evaluate Simplicity programs. Owing to its Turing incompleteness, Simplicity is amenable to static analysis that can be used to derive upper bounds on the computational resources needed, prior to execution. While Turing incomplete, Simplicity can express any finitary function, which we believe is enough to build useful "smart contracts" for blockchain applications.},
archivePrefix = {arXiv},
arxivId = {1711.03028},
author = {O'Connor, Russell},
doi = {10.1145/3139337.3139340},
eprint = {1711.03028},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/O'Connor - 2017 - Simplicity A New Language for Blockchains.pdf:pdf},
isbn = {9781450350990},
pages = {1--34},
title = {{Simplicity: A New Language for Blockchains}},
url = {http://arxiv.org/abs/1711.03028{\%}0Ahttp://dx.doi.org/10.1145/3139337.3139340},
year = {2017}
}
@unpublished{Rosu2007,
author = {Rosu, Grigore},
file = {:home/nud3l/share/knowledge/K A Rewriting-Based Framework for Computations -- Preliminary version --.pdf:pdf},
title = {{K: A Rewriting-Based Framework for Computations - Preliminary version}},
year = {2007}
}
@article{Wohrer2018,
abstract = {Smart contracts that build up on blockchain technologies are receiving great attention in new business applications and the scientific community, because they allow untrusted parties to manifest contract terms in program code and thus eliminate the need for a trusted third party. The creation process of writing well performing and secure contracts in Ethereum, which is today{\&}{\#}8217;s most prominent smart contract platform, is a difficult task. Research on this topic has only recently started in industry and science. Based on an analysis of collected data with Grounded Theory techniques, we have elaborated several common security patterns, which we describe in detail on the basis of Solidity, the dominating programming language for Ethereum. The presented patterns describe solutions to typical security issues and can be applied by Solidity developers to mitigate typical attack scenarios.},
author = {Wohrer, Maximilian and Zdun, Uwe},
doi = {10.1109/IWBOSE.2018.8327565},
file = {:home/nud3l/share/knowledge/sanerws18iwbosemain-id1-p-380f58e-35576-preprint.pdf:pdf},
isbn = {9781538659861},
journal = {2018 IEEE 1st International Workshop on Blockchain Oriented Software Engineering, IWBOSE 2018 - Proceedings},
pages = {2--8},
title = {{Smart contracts: Security patterns in the ethereum ecosystem and solidity}},
volume = {2018-Janua},
year = {2018}
}
@misc{IOHK2018a,
author = {IOHK},
title = {{Meadow}},
url = {https://input-output-hk.github.io/marlowe/},
urldate = {2018-12-12},
year = {2018}
}
@unpublished{Nakamoto2008,
author = {Nakamoto, Satoshi},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Nakamoto - 2008 - Bitcoin A peer-to-peer electronic cash system.pdf:pdf},
title = {{Bitcoin: A peer-to-peer electronic cash system}},
year = {2008}
}
@article{Pirlea2018,
abstract = {We present the first formalisation of a blockchain-based distributed consensus protocol with a proof of its consis-tency mechanised in an interactive proof assistant. Our development includes a reference mechanisation of the block forest data structure, necessary for imple-menting provably correct per-node protocol logic. We also define a model of a network, implementing the pro-tocol in the form of a replicated state-transition system. The protocol's executions are modeled via a small-step operational semantics for asynchronous message passing, in which packages can be rearranged or duplicated. In this work, we focus on the notion of global system safety, proving a form of eventual consistency. To do so, we provide a library of theorems about a pure functional implementation of block forests, define an inductive sys-tem invariant, and show that, in a quiescent system state, it implies a global agreement on the state of per-node transaction ledgers. Our development is parametric wrt. implementations of several security primitives, such as hash-functions, a notion of a proof object, a Validator Acceptance Function, and a Fork Choice Rule. We pre-cisely characterise the assumptions, made about these components for proving the global system consensus, and discuss their adequacy. All results described in this paper are formalised in the Coq proof assistant.},
author = {P{\^{i}}rlea, George and Sergey, Ilya},
doi = {10.1145/3167086},
file = {:home/nud3l/share/knowledge/poplws18cpp-id48.pdf:pdf},
isbn = {9781450355865},
journal = {Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs  - CPP 2018},
keywords = {2018,acm reference format,acm sigplan international confer-,blockchain,consensus,coq,george p{\^{i}}rlea and ilya,in proceedings of 7th,mechanising blockchain con-,protocol verification,sensus,sergey},
pages = {78--90},
title = {{Mechanising blockchain consensus}},
url = {http://dl.acm.org/citation.cfm?doid=3176245.3167086},
year = {2018}
}
@misc{FIPA2002,
author = {FIPA},
title = {{FIPA Contract Net Interaction Protocol Specification}},
url = {http://www.fipa.org/specs/fipa00029/SC00029H.html},
urldate = {2018-04-12},
year = {2002}
}
@book{Nisan2007,
abstract = {Over the last few years, there has been explosive growth in the research done at the in-terface of computer science, game theory, and economic theory, largely motivated by the emergence of the Internet. Algorithmic Game Theory develops the central ideas and results of this new and exciting area. More than 40 of the top researchers in this field have written chapters whose topics range from the foundations to the state of the art. This book contains an extensive treatment of algorithms for equilibria in games and markets, computational auctions and mechanism design, and the " price of anarchy, " as well as applications in networks, peer-to-peer systems, security, information markets, and more.},
address = {Cambridge},
archivePrefix = {arXiv},
arxivId = {0907.4385},
author = {Nisan, Noam and Roughgarden, Tim and Tardos, Eva and Vazirani, Vijay V.},
doi = {10.1017/CBO9780511800481},
editor = {Nisan, Noam and Roughgarden, Tim and Tardos, Eva and Vazirani, Vijay V.},
eprint = {0907.4385},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Nisan et al. - 2007 - Algorithmic Game Theory.pdf:pdf},
isbn = {9780511800481},
issn = {00010782},
month = {jul},
pages = {1--754},
pmid = {16026978},
publisher = {Cambridge University Press},
title = {{Algorithmic Game Theory}},
volume = {1},
year = {2007}
}
@inproceedings{Rocha2017,
address = {New York, New York, USA},
author = {Rocha, Henrique and Ducasse, St{\'{e}}phane and Denker, Marcus and Lecerf, Jason},
booktitle = {Proceedings of the 12th edition of the International Workshop on Smalltalk Technologies - IWST '17},
doi = {10.1145/3139903.3139906},
file = {:home/nud3l/share/knowledge/Roch17a-IWST-SolidityParser.pdf:pdf},
isbn = {9781450355544},
keywords = {blockchain,ethereum,parser,smacc,solidity},
pages = {1--9},
publisher = {ACM Press},
title = {{Solidity Parsing Using SmaCC}},
url = {http://dl.acm.org/citation.cfm?doid=3139903.3139906},
year = {2017}
}
@article{Governatori2006,
abstract = {This paper presents a formal system for reasoning about violations of obligations in contracts. The system is based on the formalism for the representation of contrary-to-duty obligations. These are the obligations that take place when other obligations are violated as typically applied to penalties in contracts. The paper shows how this formalism can be mapped onto the key policy concepts of a contract specification language, called Business Contract Language (BCL), previously developed to express contract conditions for run time contract monitoring. The aim of this mapping is to establish a formal underpinning for this key subset of BCL.},
author = {Governatori, Guido and Milosevic, Zoran},
doi = {10.1142/S0218843006001529},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Governatori, Milosevic - 2006 - A formal analysis of a business contract language.pdf:pdf},
issn = {0218-8430},
journal = {International Journal of Cooperative Information Systems},
keywords = {business contract language,formal contract language},
number = {4},
pages = {659--685},
title = {{A formal analysis of a business contract language}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.142.3115{\&}rep=rep1{\&}type=pdf},
volume = {15},
year = {2006}
}
@misc{Erfurt2018,
author = {Erfurt, Denis and Lundfall, Martin and Hildenbrandt, Everett and Livnev, Lev},
title = {{KLab}},
url = {https://github.com/dapphub/klab},
urldate = {2018-12-13},
year = {2018}
}
@misc{EthereumFoundation2018IULIA,
author = {{Ethereum Foundation}},
title = {{Yul}},
url = {https://solidity.readthedocs.io/en/develop/yul.html},
urldate = {2018-09-04},
year = {2018}
}
@article{Gommerstadt2018,
abstract = {{\textcopyright} The Author(s) 2018. In sequential languages, dynamic contracts are usually expressed as boolean functions without externally observable effects, written within the language. We propose an analogous notion of concurrent contracts for languages with session-typed message-passing concurrency. Concurrent contracts are partial identity processes that monitor the bidirectional communication along channels and raise an alarm if a contract is violated. Concurrent contracts are session-typed in the usual way and must also satisfy a transparency requirement, which guarantees that terminating compliant programs with and without the contracts are observationally equivalent. We illustrate concurrent contracts with several examples. We also show how to generate contracts from a refinement session-type system and show that the resulting monitors are redundant for programs that are well-typed.},
author = {Gommerstadt, Hannah and Jia, Limin and Pfenning, Frank},
doi = {10.1007/978-3-319-89884-1_27},
file = {:home/nud3l/share/knowledge/esop18.pdf:pdf},
isbn = {9783319898834},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Contracts,Monitors,Session types},
pages = {771--798},
title = {{Session-typed concurrent contracts}},
volume = {10801 LNCS},
year = {2018}
}
@article{Brent2018,
abstract = {The rise of modern blockchains has facilitated the emergence of smart contracts: autonomous programs that live and run on the blockchain. Smart contracts have seen a rapid climb to prominence, with applications predicted in law, business, commerce, and governance. Smart contracts are commonly written in a high-level language such as Ethereum's Solidity, and translated to compact low-level bytecode for deployment on the blockchain. Once deployed, the bytecode is autonomously executed, usually by a virtual machine. As with all programs, smart contracts can be highly vulnerable to malicious attacks due to deficient programming methodologies, languages, and toolchains, including buggy compilers. At the same time, smart contracts are also high-value targets, often commanding large amounts of cryptocurrency. Hence, developers and auditors need security frameworks capable of analysing low-level byte-code to detect potential security vulnerabilities. In this paper, we present Vandal: a security analysis framework for Ethereum smart contracts. Vandal consists of an analysis pipeline that converts low-level Ethereum Virtual Machine (EVM) bytecode to semantic logic relations. Users of the framework can express security analyses in a declarative fashion: a security analysis is expressed in a logic specification written in the Souffl{\'{e}} language. We conduct a large-scale empirical study for a set of common smart contract security vulnerabilities, and show the effectiveness and efficiency of Vandal. Vandal is both fast and robust, successfully analysing over 95{\%} of all 141k unique contracts with an average runtime of 4.15 seconds; outperforming the current state of the art tools-Oyente, EthIR, Mythril, and Rattle-under equivalent conditions .},
archivePrefix = {arXiv},
arxivId = {arXiv:1809.03981v1},
author = {Brent, Lexi and Jurisevic, Anton and Kong, Michael and Liu, Eric and Gauthier, Fran{\c{c}}ois and Gramoli, Vincent and Holz, Ralph and Scholz, Bernhard},
eprint = {arXiv:1809.03981v1},
file = {:home/nud3l/share/knowledge/1809.03981.pdf:pdf},
pages = {1--28},
title = {{Vandal: A Scalable Security Analysis Framework for Smart Contracts}},
url = {https://github.com/usyd-blockchain/vandal},
year = {2018}
}
@inproceedings{Luu2016,
abstract = {Cryptocurrencies record transactions in a decentralized data structure called a blockchain. Two of the most popular cryptocurrencies, Bitcoin and Ethereum, support the fea-ture to encode rules or scripts for processing transactions. This feature has evolved to give practical shape to the ideas of smart contracts, or full-fledged programs that are run on blockchains. Recently, Ethereum's smart contract system has seen steady adoption, supporting tens of thousands of contracts, holding millions dollars worth of virtual coins. In this paper, we investigate the security of running smart contracts based on Ethereum in an open distributed network like those of cryptocurrencies. We introduce several new se-curity problems in which an adversary can manipulate smart contract execution to gain profit. These bugs suggest subtle gaps in the understanding of the distributed semantics of the underlying platform. As a refinement, we propose ways to enhance the operational semantics of Ethereum to make con-tracts less vulnerable. For developers writing contracts for the existing Ethereum system, we build a symbolic execution tool called Oyente to find potential security bugs. Among 19, 366 existing Ethereum contracts, Oyente flags 8, 833 of them as vulnerable, including the TheDAO bug which led to a 60 million US dollar loss in June 2016. We also discuss the severity of other attacks for several case studies which have source code available and confirm the attacks (which target only our accounts) in the main Ethereum network.},
address = {New York, New York, USA},
author = {Luu, Loi and Chu, Duc-Hiep and Olickel, Hrishi and Saxena, Prateek and Hobor, Aquinas},
booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security - CCS'16},
doi = {10.1145/2976749.2978309},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Luu et al. - 2016 - Making Smart Contracts Smarter.pdf:pdf},
isbn = {9781450341394},
issn = {15437221},
pages = {254--269},
publisher = {ACM Press},
title = {{Making Smart Contracts Smarter}},
year = {2016}
}
@inproceedings{Coblenz2017,
abstract = {{\textcopyright} 2017 IEEE. Blockchain platforms, such as Ethereum, promise to facilitate transactions on a decentralized computing platform among parties that have not established trust. Recognition of the unique challenges of blockchain programming has inspired developers to create domain-specific languages, such as Solidity, for programming blockchain systems. Unfortunately, bugs in Solidity programs have recently been exploited to steal money. We propose a new programming language, Obsidian, to make it easier for programmers to write correct programs.},
author = {Coblenz, Michael},
booktitle = {2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C)},
doi = {10.1109/ICSE-C.2017.150},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Coblenz - 2017 - Obsidian A Safer Blockchain Programming Language.pdf:pdf},
isbn = {978-1-5386-1589-8},
keywords = {Blockchain programming,Blockchain security,Programming language usability},
month = {may},
pages = {97--99},
publisher = {IEEE},
title = {{Obsidian: A Safer Blockchain Programming Language}},
url = {http://ieeexplore.ieee.org/document/7965268/},
year = {2017}
}
@inproceedings{Gardner2017,
author = {Santos, Jos{\'{e}} Fragoso and Gardner, Philippa and Maksimovi{\'{c}}, Petar and Naud{\v{z}}iūnienė, Daiva},
booktitle = {International Conference on Automated Deduction (CADE 2017)},
doi = {10.1007/978-3-319-63046-5_2},
file = {:home/nud3l/share/knowledge/Santos2017{\_}Chapter{\_}TowardsLogic-BasedVerification (1).pdf:pdf},
isbn = {978-3-319-63045-8},
pages = {8--25},
title = {{Towards Logic-Based Verification of JavaScript Programs}},
url = {http://link.springer.com/10.1007/978-3-319-63046-5 http://link.springer.com/10.1007/978-3-319-63046-5{\_}2},
volume = {10395},
year = {2017}
}
@misc{Tani2018,
author = {Tani, Takenobu},
title = {{EVM (Ethereum virtual machine) Assembly on Haskell DSL}},
url = {https://github.com/takenobu-hs/haskell-ethereum-assembly},
urldate = {2018-05-30},
year = {2018}
}
@inproceedings{Dickerson2018,
author = {Dickerson, Thomas and Gazzillo, Paul and Herlihy, Maurice and Saraph, Vikram and Koskinen, Eric},
booktitle = {2nd Workshop on Trusted Smart Contracts (Financial Cryptography and Data Security)},
file = {:home/nud3l/share/knowledge/wtsc18.pdf:pdf},
title = {{Proof-Carrying Smart Contracts}},
year = {2018}
}
@book{Seijas2017,
abstract = {We give an overview of the scripting languages used in existing cryptocurren-cies, and in particular we review in some detail the scripting languages of Bitcoin, Nxt and Ethereum, in the context of a high-level overview of Distributed Ledger Technology and cryptocurrencies. We survey different approaches, and give an overview of critiques of existing languages. We also cover technologies that might be used to underpin extensions and innovations in scripting and contracts, including technologies for verification, such as zero knowledge proofs, proof-carrying code and static analysis, as well as approaches to Meredith2018making systems more efficient, e.g. Merkelized Abstract Syntax Trees.},
address = {Cham},
author = {Seijas, Pablo Lamela and Thompson, Simon and McAdams, Darryl},
booktitle = {Lecture Notes in Computer Science},
doi = {10.1007/978-3-319-70278-0},
editor = {Brenner, Michael and Rohloff, Kurt and Bonneau, Joseph and Miller, Andrew and Ryan, Peter Y.A. and Teague, Vanessa and Bracciali, Andrea and Sala, Massimiliano and Pintore, Federico and Jakobsson, Markus},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Seijas, Thompson, McAdams - 2017 - Scripting smart contracts for distributed ledger technology.pdf:pdf},
isbn = {978-3-319-70277-3},
issn = {16113349},
pages = {631--632},
publisher = {Springer International Publishing},
series = {Lecture Notes in Computer Science},
title = {{Scripting smart contracts for distributed ledger technology}},
url = {http://link.springer.com/10.1007/978-3-319-70278-0},
volume = {10323},
year = {2017}
}
@inproceedings{Kosba2015,
author = {Kosba, Ahmed and Miller, Andrew and Shi, Elaine and Wen, Zikai and Papamanthou, Charalampos},
booktitle = {2016 IEEE Symposium on Security and Privacy (SP)},
doi = {10.1109/SP.2016.55},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kosba et al. - 2016 - Hawk The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts.pdf:pdf},
isbn = {978-1-5090-0824-7},
keywords = {dblp},
mendeley-tags = {dblp},
month = {may},
pages = {839--858},
publisher = {IEEE},
title = {{Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts}},
volume = {2015},
year = {2016}
}
@article{He2018,
abstract = {The smart contract is an interdisciplinary concept that concerns business, finance, contract law and information technology. Designing and developing a smart contract may require the close cooperation of many experts coming from different fields. How to support such collaborative development is a challenging problem in blockchain-oriented software engi- neering. This paper proposes SPESC, a specification language for smart contracts, which can define the specification of a smart contract for the purpose of collaborative design. SPESC can specify a smart contract in a similar form to real-world contracts using a natural-language-like grammar, in which the obligations and rights of parties and the transaction rules of cryptocurrencies are clearly defined. The preliminary study results demonstrated that SPESC can be easily learned and understood by both IT and non-IT users and thus has greater potential to facilitate collaborative smart contract development.},
author = {He, Xiao and Qin, Bohan and Zhu, Yan and Chen, Xing and Liu, Yi},
doi = {10.1109/COMPSAC.2018.00025},
file = {:home/nud3l/share/knowledge/08377649.pdf:pdf},
isbn = {978-1-5386-2666-5},
issn = {0730-3157},
journal = {2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)},
pages = {132--137},
publisher = {IEEE},
title = {{SPESC: A Specification Language for Smart Contracts}},
url = {https://ieeexplore.ieee.org/document/8377649/},
year = {2018}
}
@article{Christidis2016,
abstract = {Motivated by the recent explosion of interest around blockchains, we examine whether they make a good fit for the Internet of Things (IoT) sector. Blockchains allow us to have a distributed peer-to-peer network where non-trusting members can interact with each other without a trusted intermediary, in a verifiable manner. We review how this mechanism works and also look into smart contracts—scripts that reside on the blockchain that allow for the automation of multi-step processes. We then move into the IoT domain, and describe how a blockchain-IoT combination: 1) facilitates the sharing of services and resources leading to the creation of a marketplace of services between devices and 2) allows us to automate in a cryptographically verifiable manner several existing, time-consuming workflows. We also point out certain issues that should be considered before the deployment of a blockchain network in an IoT setting: from transactional privacy to the expected value of the digitized assets traded on the network. Wherever applicable, we identify solutions and workarounds. Our conclusion is that the blockchain-IoT combination is powerful and can cause significant transformations across several industries, paving the way for new business models and novel, distributed applications.},
author = {Christidis, Konstantinos and Devetsikiotis, Michael},
doi = {10.1109/ACCESS.2016.2566339},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Christidis, Devetsikiotis - 2016 - Blockchains and Smart Contracts for the Internet of Things.pdf:pdf},
isbn = {2169-3536 VO - 4},
issn = {2169-3536},
journal = {IEEE Access},
keywords = {Internet of Things,blockchain,distributed systems},
pages = {2292--2303},
title = {{Blockchains and Smart Contracts for the Internet of Things}},
url = {http://ieeexplore.ieee.org/document/7467408/},
volume = {4},
year = {2016}
}
@misc{EthereumFoundation2018ewasm,
author = {{Ethereum Foundation}},
title = {{eWASM}},
url = {https://github.com/ewasm/design},
urldate = {2018-08-16},
year = {2018}
}
@incollection{Bigi2015,
author = {Bigi, Giancarlo and Bracciali, Andrea and Meacci, Giovanni and Tuosto, Emilio},
booktitle = {Programming Languages with Applications to Biology and Security},
doi = {10.1007/978-3-319-25527-9_11},
file = {:home/nud3l/share/knowledge/Bigi2015{\_}Chapter{\_}ValidationOfDecentralisedSmart.pdf:pdf},
isbn = {978-3-319-25526-2},
pages = {142--161},
title = {{Validation of Decentralised Smart Contracts Through Game Theory and Formal Methods}},
volume = {9465},
year = {2015}
}
@unpublished{Chatterjee2019,
author = {Chatterjee, Krishnendu and Goharshady, Amir and Pourdamghani, Arash and Chatterjee, Krishnendu and Goharshady, Amir and Pourdamghani, Arash and Smart, Probabilistic and Chatterjee, Krishnendu},
file = {:home/nud3l/share/knowledge/paper.pdf:pdf},
keywords = {blockchain theory,grams,probabilistic pro-,random number generation,randomization,smart contracts},
title = {{Probabilistic Smart Contracts: Secure Randomness on the Blockchain}},
year = {2019}
}
@incollection{Delmolino2016,
abstract = {While a lot has changed in Internet security in the last 10 years, a lot has stayed the same – such as the use of alphanumeric$\backslash$n passwords. Passwords remain the dominant means of authentication on the Internet, even in the face of significant problems$\backslash$n related to password forgetting and theft. In fact, despite large numbers of proposed alternatives, we must remember more passwords$\backslash$n than ever before. Why is this? Will alphanumeric passwords still be ubiquitous in 2019, or will adoption of alternative proposals$\backslash$n be commonplace? What must happen in order to move beyond passwords? This note pursues these questions, following a panel discussion$\backslash$n at Financial Cryptography and Data Security 2009.},
archivePrefix = {arXiv},
arxivId = {arXiv:1311.0243},
author = {Delmolino, Kevin and Arnett, Mitchell and Kosba, Ahmed and Miller, Andrew and Shi, Elaine},
doi = {10.1007/978-3-662-53357-4_6},
eprint = {arXiv:1311.0243},
file = {:home/nud3l/share/knowledge/Delmolino2016{\_}Chapter{\_}StepByStepTowardsCreatingASafe.pdf:pdf},
isbn = {978-3-662-54969-8},
issn = {0302-9743},
pages = {79--94},
pmid = {4520227},
title = {{Step by Step Towards Creating a Safe Smart Contract: Lessons and Insights from a Cryptocurrency Lab}},
url = {http://link.springer.com/10.1007/978-3-662-54970-4 http://link.springer.com/10.1007/978-3-662-53357-4{\_}6},
volume = {9603},
year = {2016}
}
@inproceedings{Sergey2018a,
author = {Sergey, Ilya and Kumar, Amrit and Hobor, Aquinas},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-030-03427-6_25},
file = {:home/nud3l/share/knowledge/temporal-isola18.pdf:pdf},
isbn = {9783030034269},
issn = {16113349},
pages = {323--338},
title = {{Temporal properties of smart contracts}},
volume = {11247 LNCS},
year = {2018}
}
@misc{Hirai2018Bamboo,
author = {Hirai, Yoichi},
title = {{Bamboo}},
url = {https://github.com/pirapira/bamboo},
urldate = {2018-08-16},
year = {2018}
}
@article{Webster2012,
author = {Webster, Jane and Watson, Richard T},
doi = {10.2307/4132319},
file = {:home/nud3l/share/knowledge/4132319.pdf:pdf},
journal = {MIS Quarterly},
number = {2},
pages = {xiii--xxiii},
title = {{Analyzing the Past to Prepare for the Future : Writing a Literature Review}},
volume = {26},
year = {2012}
}
@misc{Ethereum2018Solidity,
annote = {NULL},
author = {{Ethereum Foundation}},
title = {{Solidity 0.5.4 documentation}},
url = {https://solidity.readthedocs.io/en/develop/},
urldate = {2019-02-18},
year = {2018}
}
@unpublished{Mavridou2018,
archivePrefix = {arXiv},
arxivId = {1711.09327},
author = {Mavridou, Anastasia and Laszka, Aron},
eprint = {1711.09327},
file = {:home/nud3l/share/knowledge/mavridou2018designing.pdf:pdf},
keywords = {automatic code generation,design patterns,ethereum,finite state machine,security,smart contract,solidity},
title = {{Designing Secure Ethereum Smart Contracts: A Finite State Machine Based Approach}},
year = {2018}
}
@article{Kollingbaum2003a,
author = {Kollingbaum, Martin J. and Norman, Timothy J.},
file = {:home/nud3l/share/knowledge/240.pdf:pdf},
issn = {10450823},
journal = {IJCAI International Joint Conference on Artificial Intelligence},
number = {X},
pages = {1465--1466},
title = {{NoA - A normative agent architecture}},
year = {2003}
}
@inproceedings{Breidenbach2018,
abstract = {—Vulnerability reward programs, a.k.a. bug bounties, are a popular tool that could help prevent software exploits. Today, however, they lack rigorous principles for setting bounty amounts and require high payments to attract economically rational hackers. Rather than claim bounties for serious bugs, hackers often sell or exploit them. We present the Hydra Framework, the first general, principled approach to modeling and administering bug bounties and boosting incentives for hackers to report bugs. The key idea is what we call an exploit gap, a program transformation that enables runtime detection of security-critical bugs. The Hydra Framework transforms programs via N-of-N-version program-ming (NNVP), a variant of classical N-version programming that executes multiple independent program instances. We apply the Hydra Framework to smart contracts, small programs that execute on blockchains. We show how Hydra contracts greatly amplify the power of bounties to incentivize bug disclosure by economically rational adversaries, establishing the first framework for economic evaluation of smart contract security. We also model powerful adversaries capable of bug withholding, exploiting race conditions in blockchains to claim bounties before honest users can. We present Submarine Commit-ments, a countermeasure of independent interest that conceals transactions on blockchains. We present a simple core Hydra Framework for Ethereum. We report the implementation of two Hydra contracts—an ERC20 token contract and a Monty-Hall-like game.},
author = {Breidenbach, Lorenz and Daian, Phil and Er, Floriantra and Juels, Ari},
booktitle = {27th USENIX Security Symposium (USENIX Security 18)},
file = {:home/nud3l/share/knowledge/1090.pdf:pdf},
pages = {1335--1352},
title = {{Enter the Hydra: Towards Principled Bug Bounties and Exploit-Resistant Smart Contracts}},
url = {https://thehydra.io/paper.pdf},
year = {2018}
}
@techreport{Sergey2018,
abstract = {This paper outlines key design principles of Scilla---an intermediate-level language for verified smart contracts. Scilla provides a clean separation between the communication aspect of smart contracts on a blockchain, allowing for the rich interaction patterns, and a programming component, which enjoys principled semantics and is amenable to formal verification. Scilla is not meant to be a high-level programming language, and we are going to use it as a translation target for high-level languages, such as Solidity, for performing program analysis and verification, before further compilation to an executable bytecode. We describe the automata-based model of Scilla, present its programming component and show how contract definitions in terms of automata streamline the process of mechanised verification of their safety and temporal properties.},
archivePrefix = {arXiv},
arxivId = {1801.00687},
author = {Sergey, Ilya and Kumar, Amrit and Hobor, Aquinas},
eprint = {1801.00687},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sergey, Kumar, Hobor - 2018 - Scilla a Smart Contract Intermediate-Level LAnguage.pdf:pdf},
title = {{Scilla: a Smart Contract Intermediate-Level LAnguage}},
year = {2018}
}
@misc{Lippmeier2018,
author = {Lippmeier, Ben and Kmett, Edward},
booktitle = {DAML series},
title = {{A new language for a new paradigm: smart contracts}},
url = {https://medium.com/daml-driven/a-new-language-for-a-new-paradigm-smart-contracts-648cc30294ad},
urldate = {2018-08-17},
year = {2018}
}
@incollection{Frowis2017,
abstract = {Program code stored on the Ethereum blockchain is consid- ered immutable, but this does not imply that its control flow cannot be modified. This bears the risk of loopholes whenever parties encode binding agreements in smart contracts. In order to quantify the issue, we define a heuristic indicator of control flow immutability, evaluate it based on a call graph of all smart contracts deployed on Ethereum, and find that two out of five smart contracts require trust in at least one third party. Besides, the analysis reveals that significant parts of the Ethereum blockchain are interspersed with debris from past attacks against the platform. We leverage the call graph to develop a method for data cleanup, which allows for less biased statistics of Ethereum use in practice. Keywords:},
address = {Cham},
author = {Fr{\"{o}}wis, Michael and B{\"{o}}hme, Rainer},
booktitle = {Data Privacy Management, Cryptocurrencies and Blockchain Technology DPM 2017, CBT 2017},
doi = {10.1007/978-3-319-67816-0_20},
editor = {Garcia-Alfaro, Joaquin and Navarro-Arribas, Guillermo and Hartenstein, Hannes and Herrera-Joancomart{\'{i}}, Jordi},
file = {:home/nud3l/share/knowledge/Fr{\"{o}}wis-B{\"{o}}hme2017{\_}Chapter{\_}InCodeWeTrust.pdf:pdf},
isbn = {978-3-319-67815-3},
keywords = {smart contract},
pages = {357--372},
publisher = {Springer International Publishing},
series = {Lecture Notes in Computer Science},
title = {{In Code We Trust?}},
volume = {10436},
year = {2017}
}
@article{Xu2004,
abstract = {Contracts between multiple business parties play an increasingly important role in the global economy where activities along the value chain are executed by independent, yet co-operating, companies. Information technology to enact a value chain is now being deployed in the form of ERP systems, workflow systems, web services and e-marketplaces. However, there is little known on how to formally model a multi-party contract. In this paper, we investigate how to model a multi-party contract in a manner convenient for detecting the parties responsible for contract violations.},
author = {Xu, Lai},
doi = {10.1145/1120694.1120697},
file = {:home/nud3l/share/knowledge/p13-xu.pdf:pdf},
issn = {15519031},
journal = {ACM SIGecom Exchanges},
keywords = {Contract violation,Detecting contract violation,E-contract},
number = {1},
pages = {13--23},
title = {{A multi-party contract model}},
url = {http://portal.acm.org/citation.cfm?doid=1120694.1120697},
volume = {5},
year = {2004}
}
@article{Grech2018,
abstract = {Ethereum is a distributed blockchain platform, serving as an ecosystem for smart contracts: full-fledged inter-communicating programs that capture the transaction logic of an account. Unlike programs in mainstream languages, a gas limit restricts the execution of an Ethereum smart contract: execution proceeds as long as gas is available. Thus, gas is a valuable resource that can be manipulated by an attacker to provoke unwanted behavior in a victim's smart contract (e.g., wasting or blocking funds of said victim). Gas-focused vulnerabilities exploit undesired behavior when a contract (directly or through other interacting contracts) runs out of gas. Such vulnerabilities are among the hardest for programmers to protect against, as out-of-gas behavior may be uncommon in non-attack scenarios and reasoning about it is far from trivial. In this paper, we classify and identify gas-focused vulnerabilities, and present MadMax: a static program analysis technique to automatically detect gas-focused vulnerabilities with very high confidence. Our approach combines a control-flow-analysis-based decompiler and declarative program-structure queries. The combined analysis captures high-level domain-specific concepts (such as {\l}dynamic data structure storage{\v{z}} and {\l}safely resumable loops{\v{z}}) and achieves high precision and scalability. MadMax analyzes the entirety of smart contracts in the Ethereum blockchain in just 10 hours (with decompilation timeouts in 8{\%} of the cases) and flags contracts with a (highly volatile) monetary value of over {\$}2.8B as vulnerable. Manual inspection of a sample of flagged contracts shows that 81{\%} of the sampled warnings do indeed lead to vulnerabilities, which we report on in our experiment.},
author = {Grech, Neville and Kong, Michael and Jurisevic, Anton and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},
doi = {10.1145/3276486},
file = {:home/nud3l/share/knowledge/oopsla18main-p212-p.pdf:pdf},
issn = {24751421},
journal = {Proceedings of the ACM on Programming Languages},
keywords = {Program Analysis, Smart Contracts, Security, Block},
number = {OOPSLA},
pages = {1--27},
title = {{MadMax: surviving out-of-gas conditions in Ethereum smart contracts}},
url = {http://dl.acm.org/citation.cfm?doid=3288538.3276486},
volume = {2},
year = {2018}
}
@misc{Szabo2001,
author = {Szabo, Nick},
title = {{Trusted Third Parties are Security Holes}},
url = {http://nakamotoinstitute.org/trusted-third-parties/},
urldate = {2017-05-11},
year = {2001}
}
@misc{Meier2018,
author = {Meier, Simon and Mitchell, Neil},
booktitle = {DAML series},
title = {{What properties must an enterprise smart contract language have?}},
url = {https://medium.com/daml-driven/what-properties-must-an-enterprise-smart-contract-language-have-b4c251582343},
urldate = {2018-08-31},
year = {2018}
}
@article{Governatori2018,
author = {Governatori, Guido and Idelberger, Florian and Milosevic, Zoran and Riveret, Regis and Sartor, Giovanni and Xu, Xiwei},
doi = {10.1007/s10506-018-9223-3},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Governatori et al. - 2018 - On legal contracts, imperative and declarative smart contracts, and blockchain systems.pdf:pdf},
issn = {0924-8463},
journal = {Artificial Intelligence and Law},
keywords = {Blockchain,Legal contracts,Smart contracts,contracts {\'{a}} blockchain,legal contracts {\'{a}} smart},
month = {mar},
publisher = {Springer Netherlands},
title = {{On legal contracts, imperative and declarative smart contracts, and blockchain systems}},
url = {http://link.springer.com/10.1007/s10506-018-9223-3},
year = {2018}
}
@misc{Bernauer2018,
author = {Bernauer, Alexander and Veprek, Ratko},
booktitle = {DAML series},
title = {{Trust but verify is a valuable DLT model - does your language support it?}},
url = {https://medium.com/daml-driven/trust-but-verify-is-a-valuable-dlt-model-does-your-language-support-it-bdb6ea7174c},
urldate = {2018-08-31},
year = {2018}
}
@article{Michael2010,
author = {Michael, Loizos and Parkes, David C and Pfeffer, Avi},
doi = {10.1007/s10458-009-9089-6},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Michael, Parkes, Pfeffer - 2010 - Specifying and monitoring economic environments using rights and obligations.pdf:pdf},
issn = {1387-2532},
journal = {Autonomous Agents and Multi-Agent Systems},
keywords = {electronic transactions,market semantics,obligations,rights},
month = {mar},
number = {2},
pages = {158--197},
title = {{Specifying and monitoring economic environments using rights and obligations}},
volume = {20},
year = {2010}
}
@inproceedings{DiAngelo2019,
author = {di Angelo, Monika and Sack, Christian and Salzer, Gernot},
booktitle = {Third Workshop on Trusted Smart Contracts WTSC'19},
file = {:home/nud3l/share/knowledge/SokLessons.pdf:pdf},
keywords = {ethereum,secure development,smart contract,solidity,university course},
pages = {1--15},
title = {{SoK : Development of Secure Smart Contracts – Lessons from a Graduate Course}},
year = {2019}
}
@misc{Breidenbach2017Parity,
author = {Breidenbach, Lorenz and Daian, Philip and Juels, Ari and Sirer, Emin G{\"{u}}n},
title = {{An In-Depth Look at the Parity Multisig Bug}},
url = {http://hackingdistributed.com/2017/07/22/deep-dive-parity-bug/},
urldate = {2018-09-03}
}
@techreport{Kasampalis2018,
author = {Kasampalis, Theodoros and Guth, Dwight and Moore, Brandon and Serbanuta, Traian and Serbanuta, Virgil and Filaretti, Daniele and Rosu, Grigore and Johnson, Ralph},
file = {:home/nud3l/share/knowledge/kasampalis-guth-moore-serbanuta-serbanuta-filaretti-rosu-johnson-2018-tr-public.pdf:pdf},
title = {{IELE : An intermediate-level Blockchain language designed and implemented using formal semantics}},
year = {2018}
}
@book{Clavel2007,
author = {Clavel, Manuel and Dur{\'{a}}n, Francisco and Eker, Steven and Lincoln, Patrick and Mart{\'{i}}-Oliet, Narciso and Meseguer, Jos{\'{e}} and Talcott, Carolyn},
booktitle = {Lecture Notes in Computer Science},
doi = {10.1007/978-3-540-71999-1},
isbn = {9783540719403},
issn = {03029743},
title = {{All About Maude - A High-Performance Logical Framework, How to Specify, Program and Verify Systems in Rewriting Logic}},
year = {2007}
}
@incollection{Eyal2014,
abstract = {This book constitutes the thoroughly refereed post-conference proceedings of the 18th International Conference on Financial Cryptography and Data Security (FC 2014), held in Christ Church, Barbados, in March 2014.The 19 revised full papers and 12 short papers were carefully selected and reviewed from 165 abstract registrations and 138 full papers submissions. The papers are grouped in the following topical sections: payment systems, case studies, cloud and virtualization, elliptic curve cryptography, privacy-preserving systems, authentication and visual encryption, network security, mobile system security, incentives, game theory and risk, and bitcoin anonymity.},
address = {Berlin, Heidelberg},
author = {Eyal, Ittay and Sirer, Emin G{\"{u}}n},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-662-45472-5_28},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Eyal, Sirer - 2014 - Majority Is Not Enough Bitcoin Mining Is Vulnerable.pdf:pdf},
isbn = {978-3-662-45471-8},
issn = {16113349},
pages = {436--454},
pmid = {4520227},
title = {{Majority Is Not Enough: Bitcoin Mining Is Vulnerable}},
url = {http://link.springer.com/10.1007/978-3-662-45472-5 http://link.springer.com/10.1007/978-3-662-45472-5{\_}28},
volume = {8437},
year = {2014}
}
@misc{Huschenbett2018,
author = {Huschenbett, Martin and Berthold, Jost},
booktitle = {DAML series},
title = {{The only valid smart contract is a voluntary one - easier said than done}},
url = {https://medium.com/daml-driven/the-only-valid-smart-contract-is-a-voluntary-one-easier-said-than-done-726df37c04c},
urldate = {2018-08-31},
year = {2018}
}
@inproceedings{Frantz2016,
abstract = {Blockchain technology has emerged as a solution to consistency problems in peer to peer networks. By now, it has matured as a solution to a range of use cases in which it can effectively provide the notion of third party trust without the need for a trusted (physical) third party, which makes it an attractive coordination mechanism for distributed systems. To promote the wide adoption of this technology, we yet lack mechanisms that make the specification and interpretation of smart contracts accessible to a broader audience. In this work, we propose a modeling approach that supports the semi-automated translation of human-readable contract representations into computational equivalents in order to enable the codification of laws into verifi- able and enforceable computational structures that reside within a public blockchain. We identify smart contract components that correspond to real world institutions, and propose a mapping that we operationalize using a domain-specific language in order to support the contract modeling process.We explore this capability based on selected examples and plot out directions for future research on smart contracts. Keywords–blockchain;},
author = {Frantz, Christopher K. and Nowostawski, Mariusz},
booktitle = {2016 IEEE 1st International Workshops on Foundations and Applications of Self* Systems (FAS*W)},
doi = {10.1109/FAS-W.2016.53},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Frantz, Nowostawski - 2016 - From Institutions to Code Towards Automated Generation of Smart Contracts.pdf:pdf},
isbn = {978-1-5090-3651-6},
issn = {978-3-319-42446-0},
keywords = {Autonomy,Bitcoin,Blockchain,Code generation,Distributed autonomous institutions,Domain-specific language,Ethereum,Institutional grammar,Institutions,Model-driven development,Public ledger,Smart contracts,Solidity},
month = {sep},
pages = {210--215},
publisher = {IEEE},
title = {{From Institutions to Code: Towards Automated Generation of Smart Contracts}},
url = {http://ieeexplore.ieee.org/document/7789470/},
year = {2016}
}
@unpublished{Poon2017,
abstract = {Plasma is a proposed framework for incentivized and enforced execution of smart contracts which is scalable to a signi cant amount of state updates per second (poten- tially billions) enabling the blockchain to be able to represent a signi cant amount of decentralized nancial applications worldwide. These smart contracts are incentivized to continue operation autonomously via network transaction fees, which is ultimately reliant upon the underlying blockchain (e.g. Ethereum) to enforce transactional state transitions.},
author = {Poon, Joseph and Buterin, Vitalik},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Poon, Buterin - 2017 - Plasma Scalable Autonomous Smart Contracts.pdf:pdf},
keywords = {scalable autonomous smart contracts,sma},
pages = {1--47},
title = {{Plasma: Scalable Autonomous Smart Contracts}},
url = {https://plasma.io/plasma.pdf},
year = {2017}
}
@article{Yang,
abstract = {This paper reports on the development and verification of a novel formal symbolic process virtual machine (FSPVM) for verifying the reliability and security of Ethereum smart contracts, denoted as FSPVM-E, in Coq proof assistant. It adopts execution-verification isomorphism (EVI), an extension of Curry-Howard isomorphism (CHI), as its fundamental theoretical framework. The current version of FSPVM-E is constructed on a general, extensible, and reusable formal memory (GERM) framework, an extensible and universal formal intermediate programming language Lolisa, which is a large subset of the Solidity programming language using generalized algebraic datatypes, and the corresponding formally verified interpreter of Lolisa, denoted as FEther. It supports the ERC20 standard and can automatically simultaneously symbolically execute the smart contract programs of Ethereum and verify their reliability and security properties using Hoare logic in Coq. In addition, this work, contributes to solving the problems of automation, inconsistency and reusability in higher-order logic theorem proving.},
author = {Yang, Zheng and Lei, Hang},
file = {:home/nud3l/share/knowledge/1805.00808.pdf:pdf},
keywords = {Coq,formal method,higher-order logic theorem proving,programming language,virtual machine},
number = {4},
title = {{Formal Process Virtual Machine for Smart Contracts Verification}},
url = {https://arxiv.org/pdf/1805.00808.pdf}
}
@misc{Ethereum2018Vyper,
author = {{Ethereum Foundation}},
title = {{Vyper documentation}},
url = {https://vyper.readthedocs.io/en/latest/?badge=latest},
urldate = {2018-08-16},
year = {2018}
}
@unpublished{Popejoy2017,
author = {Popejoy, Stuart},
file = {:home/nud3l/share/knowledge/Kadena-PactWhitepaper.pdf:pdf},
pages = {1--15},
title = {{The Pact Smart-Contract Language}},
url = {http://kadena.io},
year = {2017}
}
@misc{Burge2018,
author = {Burge, Michael},
title = {{Pyramid Scheme}},
url = {http://www.michaelburge.us/2017/11/28/write-your-next-ethereum-contract-in-pyramid-scheme.html},
urldate = {2018-05-30},
year = {2018}
}
@article{Smith1980,
author = {Smith, Reid},
doi = {10.1109/TC.1980.1675516},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Smith - 1980 - The Contract Net Protocol High-Level Communication and Control in a Distributed Problem Solver.pdf:pdf},
issn = {0018-9340},
journal = {IEEE Transactions on Computers},
month = {dec},
number = {12},
pages = {1104--1113},
title = {{The Contract Net Protocol: High-Level Communication and Control in a Distributed Problem Solver}},
url = {http://ieeexplore.ieee.org/document/1675516/},
volume = {C-29},
year = {1980}
}
@inproceedings{Chen2018,
author = {Chen, Xiaohong and Park, Daejun and Rosu, Grigore},
booktitle = {8th International Symposium On Leveraging Applications of Formal Methods, Verification and Validation (ISoLA'18)},
file = {:home/nud3l/share/knowledge/chen-park-rosu-2018-isola-public.pdf:pdf},
title = {{A Language-Independent Approach to Smart Contract Verification}},
year = {2018}
}
@phdthesis{Verharen1997,
author = {Verharen, Egon Marc},
school = {Tilburg University},
title = {{A Language-Action Perspective on the Design of Cooperative Information Agents}},
year = {1997}
}
@unpublished{Bowe2018,
author = {Bowe, Sean and Chiesa, Alessandro and Green, Matthew and Miers, Ian and Tech, Cornell and Wu, Howard and Berkeley, U C},
file = {:home/nud3l/share/knowledge/2018-962.pdf:pdf},
keywords = {decentralized computation,succinct arguments,zero knowledge proofs},
pages = {1--54},
title = {{ZEXE: Enabling Decentralized Private Computation}},
year = {2018}
}
@inproceedings{Alberti2004,
abstract = {In multiagent systems, agent interaction is ruled by means of interaction protocols. Compliance to protocols can be hardwired in agent programs; however, this requires that only "certified" agents interact. In open societies, composed of autonomous and heterogeneous agents whose internal structure is, in general, not accessible, interaction protocols should be specified in terms of the agent observable behaviour, and compliance should be verified by an external entity. In this paper, we propose a Java-Prolog- CHR system for verification of compliance of agents' behaviour to protocols specified in a logic-based formalism (Social Integrity Constraints). We also present the application of the formalism and the system to the specification and verification of the FIPA Contract-Net protocol.},
address = {New York, New York, USA},
author = {Alberti, Marco and Daolio, Davide and Torroni, Paolo and Gavanelli, Marco and Lamma, Evelina and Mello, Paola},
booktitle = {Proceedings of the 2004 ACM Symposium on Applied Computing - SAC '04},
doi = {10.1145/967900.967918},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Alberti et al. - 2004 - Specification and verification of agent interaction protocols in a logic-based system.pdf:pdf},
isbn = {1581138121},
keywords = {agents,computational logic,verification},
pages = {72},
publisher = {ACM Press},
title = {{Specification and verification of agent interaction protocols in a logic-based system}},
url = {http://portal.acm.org/citation.cfm?doid=967900.967918},
year = {2004}
}
@misc{Reitwiessner2016,
author = {Reitwie{\ss}ner, Christian},
booktitle = {Ethereum Meetup Berlin},
title = {{TrueBit - Off-Chain Computations for Smart Contracts}},
url = {https://chriseth.github.io/notes/talks/truebit/{\#}/},
urldate = {2017-02-01},
year = {2016}
}
@unpublished{Boneh2018,
abstract = {We study the problem of building a verifiable delay function (VDF). A VDF requires a specified number of sequential steps to evaluate, yet produces a unique output that can be efficiently and publicly verified. VDFs have many applications in decentralized systems, including pub-lic randomness beacons, leader election in consensus protocols, and proofs of replication. We formalize the requirements for VDFs and present new candidate constructions that are the first to achieve an exponential gap between evaluation and verification time.},
author = {Boneh, Dan and Bonneau, Joseph and B{\"{u}}nz, Benedikt and Fisch, Ben},
file = {:home/nud3l/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Boneh et al. - 2018 - Verifiable Delay Functions.pdf:pdf},
pages = {1--29},
title = {{Verifiable Delay Functions}},
url = {https://eprint.iacr.org/2018/601.pdf},
year = {2018}
}
@misc{Schrans2018a,
author = {Schrans, Franklin},
title = {{Flint: A New Language for Safe Smart Contracts on Ethereum}},
url = {https://medium.com/@fschrans/flint-a-new-language-for-safe-smart-contracts-on-ethereum-a5672137a5c7},
urldate = {2018-05-21},
year = {2018}
}
